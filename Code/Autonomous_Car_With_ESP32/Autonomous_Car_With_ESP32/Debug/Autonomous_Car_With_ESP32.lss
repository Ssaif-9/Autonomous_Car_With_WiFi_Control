
Autonomous_Car_With_ESP32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000273e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  0000273e  000027d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  008000f6  008000f6  00002868  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000899  00000000  00000000  000051fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  00005a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000337a  00000000  00000000  00005e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111c  00000000  00000000  000091b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002054  00000000  00000000  0000a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c08  00000000  00000000  0000c324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f55  00000000  00000000  0000cf2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002126  00000000  00000000  0000de81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000ffa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_1>
       8:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__vector_2>
       c:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_3>
      10:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_4>
      14:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_5>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__vector_10>
      2c:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__vector_11>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__vector_13>
      38:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_14>
      3c:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__vector_15>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	ce 00       	.word	0x00ce	; ????
      56:	97 00       	.word	0x0097	; ????
      58:	97 00       	.word	0x0097	; ????
      5a:	97 00       	.word	0x0097	; ????
      5c:	97 00       	.word	0x0097	; ????
      5e:	97 00       	.word	0x0097	; ????
      60:	97 00       	.word	0x0097	; ????
      62:	97 00       	.word	0x0097	; ????
      64:	97 00       	.word	0x0097	; ????
      66:	97 00       	.word	0x0097	; ????
      68:	97 00       	.word	0x0097	; ????
      6a:	97 00       	.word	0x0097	; ????
      6c:	97 00       	.word	0x0097	; ????
      6e:	97 00       	.word	0x0097	; ????
      70:	97 00       	.word	0x0097	; ????
      72:	97 00       	.word	0x0097	; ????
      74:	97 00       	.word	0x0097	; ????
      76:	97 00       	.word	0x0097	; ????
      78:	ad 00       	.word	0x00ad	; ????
      7a:	f5 00       	.word	0x00f5	; ????
      7c:	97 00       	.word	0x0097	; ????
      7e:	97 00       	.word	0x0097	; ????
      80:	aa 00       	.word	0x00aa	; ????
      82:	b6 00       	.word	0x00b6	; ????
      84:	bc 00       	.word	0x00bc	; ????
      86:	97 00       	.word	0x0097	; ????
      88:	97 00       	.word	0x0097	; ????
      8a:	97 00       	.word	0x0097	; ????
      8c:	97 00       	.word	0x0097	; ????
      8e:	97 00       	.word	0x0097	; ????
      90:	97 00       	.word	0x0097	; ????
      92:	97 00       	.word	0x0097	; ????
      94:	97 00       	.word	0x0097	; ????
      96:	97 00       	.word	0x0097	; ????
      98:	97 00       	.word	0x0097	; ????
      9a:	b0 00       	.word	0x00b0	; ????
      9c:	97 00       	.word	0x0097	; ????
      9e:	e1 00       	.word	0x00e1	; ????
      a0:	19 01       	movw	r2, r18
      a2:	eb 00       	.word	0x00eb	; ????
      a4:	07 01       	movw	r0, r14
      a6:	97 00       	.word	0x0097	; ????
      a8:	97 00       	.word	0x0097	; ????
      aa:	97 00       	.word	0x0097	; ????
      ac:	97 00       	.word	0x0097	; ????
      ae:	97 00       	.word	0x0097	; ????
      b0:	97 00       	.word	0x0097	; ????
      b2:	97 00       	.word	0x0097	; ????
      b4:	97 00       	.word	0x0097	; ????
      b6:	97 00       	.word	0x0097	; ????
      b8:	97 00       	.word	0x0097	; ????
      ba:	fe 00       	.word	0x00fe	; ????
      bc:	97 00       	.word	0x0097	; ????
      be:	97 00       	.word	0x0097	; ????
      c0:	97 00       	.word	0x0097	; ????
      c2:	97 00       	.word	0x0097	; ????
      c4:	97 00       	.word	0x0097	; ????
      c6:	b3 00       	.word	0x00b3	; ????
      c8:	b9 00       	.word	0x00b9	; ????
      ca:	97 00       	.word	0x0097	; ????
      cc:	97 00       	.word	0x0097	; ????
      ce:	97 00       	.word	0x0097	; ????
      d0:	97 00       	.word	0x0097	; ????
      d2:	97 00       	.word	0x0097	; ????
      d4:	97 00       	.word	0x0097	; ????
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	97 00       	.word	0x0097	; ????
      da:	97 00       	.word	0x0097	; ????
      dc:	97 00       	.word	0x0097	; ????
      de:	e6 00       	.word	0x00e6	; ????
      e0:	1e 01       	movw	r2, r28
      e2:	f0 00       	.word	0x00f0	; ????
      e4:	10 01       	movw	r2, r0

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	ee e3       	ldi	r30, 0x3E	; 62
      fa:	f7 e2       	ldi	r31, 0x27	; 39
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a6 3f       	cpi	r26, 0xF6	; 246
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a6 ef       	ldi	r26, 0xF6	; 246
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	af 31       	cpi	r26, 0x1F	; 31
     114:	b1 07       	cpc	r27, r17
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
     11c:	0c 94 9d 13 	jmp	0x273a	; 0x273a <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <WiFiMode_SuperLoop>:
		WiFiMode_SuperLoop();
	}	
}

void WiFiMode_SuperLoop()
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	0f 92       	push	r0
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	u8 WiFiValue;
	while(1)
	{	
		ESP32_ReceiveChar(&WiFiValue);
     12e:	ce 01       	movw	r24, r28
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	0e 94 0a 03 	call	0x614	; 0x614 <ESP32_ReceiveChar>
		switch(WiFiValue)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	c0 97       	sbiw	r24, 0x30	; 48
     13c:	89 34       	cpi	r24, 0x49	; 73
     13e:	91 05       	cpc	r25, r1
     140:	b0 f7       	brcc	.-20     	; 0x12e <WiFiMode_SuperLoop+0xa>
     142:	86 5d       	subi	r24, 0xD6	; 214
     144:	9f 4f       	sbci	r25, 0xFF	; 255
     146:	fc 01       	movw	r30, r24
     148:	ee 0f       	add	r30, r30
     14a:	ff 1f       	adc	r31, r31
     14c:	05 90       	lpm	r0, Z+
     14e:	f4 91       	lpm	r31, Z
     150:	e0 2d       	mov	r30, r0
     152:	09 94       	ijmp
		{
			case 'F' :
			WHEEL_MoveForward();
     154:	0e 94 8f 05 	call	0xb1e	; 0xb1e <WHEEL_MoveForward>
			break;
     158:	ea cf       	rjmp	.-44     	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'B' :
			WHEEL_MoveBackward ();
     15a:	0e 94 a9 05 	call	0xb52	; 0xb52 <WHEEL_MoveBackward>
			break;
     15e:	e7 cf       	rjmp	.-50     	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'S' :
			WHEEL_Stop ();
     160:	0e 94 c3 05 	call	0xb86	; 0xb86 <WHEEL_Stop>
			break;
     164:	e4 cf       	rjmp	.-56     	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'i' :
			WHEEL_MoveForwardRight ();
     166:	0e 94 dd 05 	call	0xbba	; 0xbba <WHEEL_MoveForwardRight>
			break;
     16a:	e1 cf       	rjmp	.-62     	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'G' :
			WHEEL_MoveForwardleft ();
     16c:	0e 94 f7 05 	call	0xbee	; 0xbee <WHEEL_MoveForwardleft>
			break;
     170:	de cf       	rjmp	.-68     	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'j' :
			WHEEL_MoveBackwardRight ();
     172:	0e 94 2b 06 	call	0xc56	; 0xc56 <WHEEL_MoveBackwardRight>
			break;
     176:	db cf       	rjmp	.-74     	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'H' :
			WHEEL_MoveBackwardleft ();
     178:	0e 94 11 06 	call	0xc22	; 0xc22 <WHEEL_MoveBackwardleft>
			break;
     17c:	d8 cf       	rjmp	.-80     	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'q' :
			if(Speed<MAX_SPEED)
     17e:	80 91 e3 00 	lds	r24, 0x00E3
     182:	90 91 e4 00 	lds	r25, 0x00E4
     186:	84 36       	cpi	r24, 0x64	; 100
     188:	91 05       	cpc	r25, r1
     18a:	88 f6       	brcc	.-94     	; 0x12e <WiFiMode_SuperLoop+0xa>
			{
				Speed+=1;
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	90 93 e4 00 	sts	0x00E4, r25
     192:	80 93 e3 00 	sts	0x00E3, r24
				WHEEL_SendDutyCycleAndStart(Speed);
     196:	0e 94 46 06 	call	0xc8c	; 0xc8c <WHEEL_SendDutyCycleAndStart>
     19a:	c9 cf       	rjmp	.-110    	; 0x12e <WiFiMode_SuperLoop+0xa>
			{	
			}
			break;
			
			case '0' :
			if (Speed>MIN_SPEED)
     19c:	80 91 e3 00 	lds	r24, 0x00E3
     1a0:	90 91 e4 00 	lds	r25, 0x00E4
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	19 f2       	breq	.-122    	; 0x12e <WiFiMode_SuperLoop+0xa>
			{
				Speed-=1;
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	90 93 e4 00 	sts	0x00E4, r25
     1ae:	80 93 e3 00 	sts	0x00E3, r24
				Speed == MIN_SPEED? (WHEEL_Stop()) : (WHEEL_SendDutyCycleAndStart(Speed)) ;
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	19 f4       	brne	.+6      	; 0x1bc <WiFiMode_SuperLoop+0x98>
     1b6:	0e 94 c3 05 	call	0xb86	; 0xb86 <WHEEL_Stop>
     1ba:	b9 cf       	rjmp	.-142    	; 0x12e <WiFiMode_SuperLoop+0xa>
     1bc:	0e 94 46 06 	call	0xc8c	; 0xc8c <WHEEL_SendDutyCycleAndStart>
     1c0:	b6 cf       	rjmp	.-148    	; 0x12e <WiFiMode_SuperLoop+0xa>
			{
			}
			break;
			
			case 'U' :         //BACK LIGHT ON
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	62 e0       	ldi	r22, 0x02	; 2
     1c6:	0e 94 4a 05 	call	0xa94	; 0xa94 <LED_TurnON>
			break;
     1ca:	b1 cf       	rjmp	.-158    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'u' :         //BACK LIGHT OFF
			LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	62 e0       	ldi	r22, 0x02	; 2
     1d0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			break;
     1d4:	ac cf       	rjmp	.-168    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'W' :         //Flash  ON
			LED_TurnON(LED_FLASH_PORT,LED_FLASH_PIN);
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 4a 05 	call	0xa94	; 0xa94 <LED_TurnON>
			break;
     1de:	a7 cf       	rjmp	.-178    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'w' :         //Flash  OFF
			LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			break;
     1e8:	a2 cf       	rjmp	.-188    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'C' :         //FR  ON
			LED_TurnON(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	64 e0       	ldi	r22, 0x04	; 4
     1ee:	0e 94 4a 05 	call	0xa94	; 0xa94 <LED_TurnON>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	63 e0       	ldi	r22, 0x03	; 3
     1f6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			break;
     1fa:	99 cf       	rjmp	.-206    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'c' :         //FR  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	63 e0       	ldi	r22, 0x03	; 3
     208:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			break;
     20c:	90 cf       	rjmp	.-224    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'X' :         //FL  ON
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	64 e0       	ldi	r22, 0x04	; 4
     212:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			LED_TurnON(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	63 e0       	ldi	r22, 0x03	; 3
     21a:	0e 94 4a 05 	call	0xa94	; 0xa94 <LED_TurnON>
			break;
     21e:	87 cf       	rjmp	.-242    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'x' :         //FL  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	64 e0       	ldi	r22, 0x04	; 4
     224:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			break;
     230:	7e cf       	rjmp	.-260    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			
			case 'V' :         //Horn  ON
			BUZZER_TurnOn(BUZZER_PORT,BUZZER_PIN);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	65 e0       	ldi	r22, 0x05	; 5
     236:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <BUZZER_TurnOn>
			break;
     23a:	79 cf       	rjmp	.-270    	; 0x12e <WiFiMode_SuperLoop+0xa>
			
			case 'v' :         //Horn  OFF
			BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	65 e0       	ldi	r22, 0x05	; 5
     240:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <BUZZER_TurnOff>
			break;
     244:	74 cf       	rjmp	.-280    	; 0x12e <WiFiMode_SuperLoop+0xa>

00000246 <UltraSonicMode_SuperLoop>:
	}
}


void UltraSonicMode_SuperLoop()
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	2c 97       	sbiw	r28, 0x0c	; 12
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		ULTRASOIC_GetDistance(&UltraSonic_ForwardValue);
		LCD_ClearDesplay();
		LCD_GoToLocation(1,1);
		LCD_SendString("Distance=");
     25a:	0f 2e       	mov	r0, r31
     25c:	f0 e6       	ldi	r31, 0x60	; 96
     25e:	af 2e       	mov	r10, r31
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	bf 2e       	mov	r11, r31
     264:	f0 2d       	mov	r31, r0
		LCD_SendIntegarNumber((u16)UltraSonic_ForwardValue);
		LCD_SendString("CM");
     266:	0a e6       	ldi	r16, 0x6A	; 106
     268:	10 e0       	ldi	r17, 0x00	; 0
			//	MOVE A Little Backward
			WHEEL_MoveBackward();
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
			LCD_ClearDesplay();
			LCD_GoToLocation(1,1);
			LCD_SendString("      Back      ");
     26a:	0f 2e       	mov	r0, r31
     26c:	fd e7       	ldi	r31, 0x7D	; 125
     26e:	6f 2e       	mov	r6, r31
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	7f 2e       	mov	r7, r31
     274:	f0 2d       	mov	r31, r0
			// Measure Distance At Right
			SERVO_TurnON(RIGHT_Angle);
			ULTRASOIC_GetDistance(&UltraSonic_RightValue);
			LCD_ClearDesplay();
			LCD_GoToLocation(1,1);
			LCD_SendString("R_Distance=");
     276:	0f 2e       	mov	r0, r31
     278:	fe e8       	ldi	r31, 0x8E	; 142
     27a:	4f 2e       	mov	r4, r31
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	5f 2e       	mov	r5, r31
     280:	f0 2d       	mov	r31, r0
			// Measure Distance At Left
			SERVO_TurnON(LEFT_Angle);
			ULTRASOIC_GetDistance(&UltraSonic_LeftValue);
			LCD_ClearDesplay();
			LCD_GoToLocation(1,1);
			LCD_SendString("L_Distance=");
     282:	0f 2e       	mov	r0, r31
     284:	fa e9       	ldi	r31, 0x9A	; 154
     286:	2f 2e       	mov	r2, r31
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	3f 2e       	mov	r3, r31
     28c:	f0 2d       	mov	r31, r0
		if (UltraSonic_ForwardValue==0 || UltraSonic_ForwardValue>30.0)
		{
			WHEEL_MoveForward();
			//LCD_ClearDesplay();
			LCD_GoToLocation(1,2);
			LCD_SendString("    Forward    ");
     28e:	0f 2e       	mov	r0, r31
     290:	fd e6       	ldi	r31, 0x6D	; 109
     292:	8f 2e       	mov	r8, r31
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	9f 2e       	mov	r9, r31
     298:	f0 2d       	mov	r31, r0
	f64 UltraSonic_ForwardValue ;
	f64 UltraSonic_RightValue ;
	f64 UltraSonic_LeftValue ;
	while(1)
	{
		ULTRASOIC_GetDistance(&UltraSonic_ForwardValue);
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ULTRASOIC_GetDistance>
		LCD_ClearDesplay();
     2a2:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
		LCD_GoToLocation(1,1);
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
		LCD_SendString("Distance=");
     2ae:	c5 01       	movw	r24, r10
     2b0:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
		LCD_SendIntegarNumber((u16)UltraSonic_ForwardValue);
     2b4:	69 81       	ldd	r22, Y+1	; 0x01
     2b6:	7a 81       	ldd	r23, Y+2	; 0x02
     2b8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ba:	9c 81       	ldd	r25, Y+4	; 0x04
     2bc:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
     2c0:	dc 01       	movw	r26, r24
     2c2:	cb 01       	movw	r24, r22
     2c4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
		LCD_SendString("CM");
     2c8:	c8 01       	movw	r24, r16
     2ca:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
		if (UltraSonic_ForwardValue==0 || UltraSonic_ForwardValue>30.0)
     2ce:	c9 80       	ldd	r12, Y+1	; 0x01
     2d0:	da 80       	ldd	r13, Y+2	; 0x02
     2d2:	eb 80       	ldd	r14, Y+3	; 0x03
     2d4:	fc 80       	ldd	r15, Y+4	; 0x04
     2d6:	c7 01       	movw	r24, r14
     2d8:	b6 01       	movw	r22, r12
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__cmpsf2>
     2e4:	88 23       	and	r24, r24
     2e6:	51 f0       	breq	.+20     	; 0x2fc <UltraSonicMode_SuperLoop+0xb6>
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ef       	ldi	r20, 0xF0	; 240
     2f2:	51 e4       	ldi	r21, 0x41	; 65
     2f4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__gesf2>
     2f8:	18 16       	cp	r1, r24
     2fa:	54 f4       	brge	.+20     	; 0x310 <UltraSonicMode_SuperLoop+0xca>
		{
			WHEEL_MoveForward();
     2fc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <WHEEL_MoveForward>
			//LCD_ClearDesplay();
			LCD_GoToLocation(1,2);
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	62 e0       	ldi	r22, 0x02	; 2
     304:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("    Forward    ");
     308:	c4 01       	movw	r24, r8
     30a:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     30e:	c5 cf       	rjmp	.-118    	; 0x29a <UltraSonicMode_SuperLoop+0x54>
		}
		else
		{
			BUZZER_Toggle(BUZZER_PORT,BUZZER_PIN);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	65 e0       	ldi	r22, 0x05	; 5
     314:	0e 94 00 03 	call	0x600	; 0x600 <BUZZER_Toggle>
			
			//	MOVE A Little Backward
			WHEEL_MoveBackward();
     318:	0e 94 a9 05 	call	0xb52	; 0xb52 <WHEEL_MoveBackward>
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	62 e0       	ldi	r22, 0x02	; 2
     320:	0e 94 4a 05 	call	0xa94	; 0xa94 <LED_TurnON>
			LCD_ClearDesplay();
     324:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
			LCD_GoToLocation(1,1);
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("      Back      ");
     330:	c3 01       	movw	r24, r6
     332:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	99 e6       	ldi	r25, 0x69	; 105
     33a:	a8 e1       	ldi	r26, 0x18	; 24
     33c:	81 50       	subi	r24, 0x01	; 1
     33e:	90 40       	sbci	r25, 0x00	; 0
     340:	a0 40       	sbci	r26, 0x00	; 0
     342:	e1 f7       	brne	.-8      	; 0x33c <UltraSonicMode_SuperLoop+0xf6>
     344:	00 c0       	rjmp	.+0      	; 0x346 <UltraSonicMode_SuperLoop+0x100>
     346:	00 00       	nop
			_delay_ms(500);
			WHEEL_Stop();
     348:	0e 94 c3 05 	call	0xb86	; 0xb86 <WHEEL_Stop>
			
			// Measure Distance At Right
			SERVO_TurnON(RIGHT_Angle);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	84 e3       	ldi	r24, 0x34	; 52
     352:	93 e4       	ldi	r25, 0x43	; 67
     354:	0e 94 b4 06 	call	0xd68	; 0xd68 <SERVO_TurnON>
			ULTRASOIC_GetDistance(&UltraSonic_RightValue);
     358:	ce 01       	movw	r24, r28
     35a:	05 96       	adiw	r24, 0x05	; 5
     35c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ULTRASOIC_GetDistance>
			LCD_ClearDesplay();
     360:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
			LCD_GoToLocation(1,1);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("R_Distance=");
     36c:	c2 01       	movw	r24, r4
     36e:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
			LCD_SendIntegarNumber((u16)UltraSonic_RightValue);
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
			LCD_SendString("CM");
     386:	c8 01       	movw	r24, r16
     388:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	99 e6       	ldi	r25, 0x69	; 105
     390:	a8 e1       	ldi	r26, 0x18	; 24
     392:	81 50       	subi	r24, 0x01	; 1
     394:	90 40       	sbci	r25, 0x00	; 0
     396:	a0 40       	sbci	r26, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <UltraSonicMode_SuperLoop+0x14c>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <UltraSonicMode_SuperLoop+0x156>
     39c:	00 00       	nop
			_delay_ms(500);
			
			// Measure Distance At Left
			SERVO_TurnON(LEFT_Angle);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	cb 01       	movw	r24, r22
     3a4:	0e 94 b4 06 	call	0xd68	; 0xd68 <SERVO_TurnON>
			ULTRASOIC_GetDistance(&UltraSonic_LeftValue);
     3a8:	ce 01       	movw	r24, r28
     3aa:	09 96       	adiw	r24, 0x09	; 9
     3ac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ULTRASOIC_GetDistance>
			LCD_ClearDesplay();
     3b0:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
			LCD_GoToLocation(1,1);
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("L_Distance=");
     3bc:	c1 01       	movw	r24, r2
     3be:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
			LCD_SendIntegarNumber((u16)UltraSonic_LeftValue);
     3c2:	69 85       	ldd	r22, Y+9	; 0x09
     3c4:	7a 85       	ldd	r23, Y+10	; 0x0a
     3c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ca:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
			LCD_SendString("CM");
     3d6:	c8 01       	movw	r24, r16
     3d8:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	99 e6       	ldi	r25, 0x69	; 105
     3e0:	a8 e1       	ldi	r26, 0x18	; 24
     3e2:	81 50       	subi	r24, 0x01	; 1
     3e4:	90 40       	sbci	r25, 0x00	; 0
     3e6:	a0 40       	sbci	r26, 0x00	; 0
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <UltraSonicMode_SuperLoop+0x19c>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <UltraSonicMode_SuperLoop+0x1a6>
     3ec:	00 00       	nop
			_delay_ms(500);
			LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
			
			if (UltraSonic_RightValue > UltraSonic_LeftValue)
     3f6:	6d 81       	ldd	r22, Y+5	; 0x05
     3f8:	7e 81       	ldd	r23, Y+6	; 0x06
     3fa:	8f 81       	ldd	r24, Y+7	; 0x07
     3fc:	98 85       	ldd	r25, Y+8	; 0x08
     3fe:	29 85       	ldd	r18, Y+9	; 0x09
     400:	3a 85       	ldd	r19, Y+10	; 0x0a
     402:	4b 85       	ldd	r20, Y+11	; 0x0b
     404:	5c 85       	ldd	r21, Y+12	; 0x0c
     406:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__gesf2>
     40a:	18 16       	cp	r1, r24
     40c:	34 f5       	brge	.+76     	; 0x45a <UltraSonicMode_SuperLoop+0x214>
			{
				//MOVE Right
				SERVO_TurnON(FORWARD_Angle);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	84 eb       	ldi	r24, 0xB4	; 180
     414:	92 e4       	ldi	r25, 0x42	; 66
     416:	0e 94 b4 06 	call	0xd68	; 0xd68 <SERVO_TurnON>
				LED_TurnON(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	64 e0       	ldi	r22, 0x04	; 4
     41e:	0e 94 4a 05 	call	0xa94	; 0xa94 <LED_TurnON>
				WHEEL_MoveForwardRight();
     422:	0e 94 dd 05 	call	0xbba	; 0xbba <WHEEL_MoveForwardRight>
				LCD_ClearDesplay();
     426:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
				LCD_GoToLocation(1,1);
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
				LCD_SendString("  Turn Right->> ");
     432:	86 ea       	ldi	r24, 0xA6	; 166
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	93 ed       	ldi	r25, 0xD3	; 211
     43e:	a0 e3       	ldi	r26, 0x30	; 48
     440:	81 50       	subi	r24, 0x01	; 1
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	a0 40       	sbci	r26, 0x00	; 0
     446:	e1 f7       	brne	.-8      	; 0x440 <UltraSonicMode_SuperLoop+0x1fa>
     448:	00 c0       	rjmp	.+0      	; 0x44a <UltraSonicMode_SuperLoop+0x204>
     44a:	00 00       	nop
				_delay_ms(1000);
				LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	64 e0       	ldi	r22, 0x04	; 4
     450:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
				WHEEL_Stop();
     454:	0e 94 c3 05 	call	0xb86	; 0xb86 <WHEEL_Stop>
     458:	20 cf       	rjmp	.-448    	; 0x29a <UltraSonicMode_SuperLoop+0x54>
			}
			else
			{
				//MOVE Left 
				SERVO_TurnON(FORWARD_Angle);
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	84 eb       	ldi	r24, 0xB4	; 180
     460:	92 e4       	ldi	r25, 0x42	; 66
     462:	0e 94 b4 06 	call	0xd68	; 0xd68 <SERVO_TurnON>
				LED_TurnON(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	0e 94 4a 05 	call	0xa94	; 0xa94 <LED_TurnON>
				WHEEL_MoveForwardleft();
     46e:	0e 94 f7 05 	call	0xbee	; 0xbee <WHEEL_MoveForwardleft>
				LCD_ClearDesplay();
     472:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
				LCD_GoToLocation(1,1);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
				LCD_SendString(" <<- Turn Left  ");
     47e:	87 eb       	ldi	r24, 0xB7	; 183
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	93 ed       	ldi	r25, 0xD3	; 211
     48a:	a0 e3       	ldi	r26, 0x30	; 48
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	90 40       	sbci	r25, 0x00	; 0
     490:	a0 40       	sbci	r26, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <UltraSonicMode_SuperLoop+0x246>
     494:	00 c0       	rjmp	.+0      	; 0x496 <UltraSonicMode_SuperLoop+0x250>
     496:	00 00       	nop
				_delay_ms(1000);
				LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	63 e0       	ldi	r22, 0x03	; 3
     49c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
				WHEEL_Stop();
     4a0:	0e 94 c3 05 	call	0xb86	; 0xb86 <WHEEL_Stop>
     4a4:	fa ce       	rjmp	.-524    	; 0x29a <UltraSonicMode_SuperLoop+0x54>

000004a6 <main>:
#define MAX_SPEED                         100
#define MIN_SPEED                         0


int main(void)
{
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	0f 92       	push	r0
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
	u8 ModeValue ;
	
	GLBI_Enable();
     4b0:	0e 94 82 0b 	call	0x1704	; 0x1704 <GLBI_Enable>
	
	BUTTON_init(BUTTON_MODE_PORT,BUTTON_MODE_PIN);
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	62 e0       	ldi	r22, 0x02	; 2
     4b8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <BUTTON_init>
	BUTTON_ReadValue(BUTTON_MODE_PORT,BUTTON_MODE_PIN,&ModeValue,BUTTON_PullDown);
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	62 e0       	ldi	r22, 0x02	; 2
     4c0:	ae 01       	movw	r20, r28
     4c2:	4f 5f       	subi	r20, 0xFF	; 255
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <BUTTON_ReadValue>
	
	LCD_init();
     4cc:	0e 94 89 03 	call	0x712	; 0x712 <LCD_init>
	
	WHEEL_Init();
     4d0:	0e 94 61 05 	call	0xac2	; 0xac2 <WHEEL_Init>
	
	LED_init(LED_BACK_PORT,LED_BACK_PIN);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	62 e0       	ldi	r22, 0x02	; 2
     4d8:	0e 94 42 05 	call	0xa84	; 0xa84 <LED_init>
	LED_init(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	64 e0       	ldi	r22, 0x04	; 4
     4e0:	0e 94 42 05 	call	0xa84	; 0xa84 <LED_init>
	LED_init(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	63 e0       	ldi	r22, 0x03	; 3
     4e8:	0e 94 42 05 	call	0xa84	; 0xa84 <LED_init>
	LED_init(LED_FLASH_PORT,LED_FLASH_PIN);
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 42 05 	call	0xa84	; 0xa84 <LED_init>
	BUZZER_init(BUZZER_PORT,BUZZER_PIN);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	65 e0       	ldi	r22, 0x05	; 5
     4f8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <BUZZER_init>
	
	LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	64 e0       	ldi	r22, 0x04	; 4
     500:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
	LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
	LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
	LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_TurnOFF>
	BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	65 e0       	ldi	r22, 0x05	; 5
     520:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <BUZZER_TurnOff>
	
	
	if (ULTRASONIC_MODE == ModeValue)
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	88 23       	and	r24, r24
     528:	31 f5       	brne	.+76     	; 0x576 <main+0xd0>
	{
		LCD_GoToLocation(1,1);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
		LCD_SendString("Ultrasonic ON");
     532:	88 ec       	ldi	r24, 0xC8	; 200
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	93 ed       	ldi	r25, 0xD3	; 211
     53e:	a0 e3       	ldi	r26, 0x30	; 48
     540:	81 50       	subi	r24, 0x01	; 1
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	a0 40       	sbci	r26, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <main+0x9a>
     548:	00 c0       	rjmp	.+0      	; 0x54a <main+0xa4>
     54a:	00 00       	nop
		_delay_ms(1000);
		
		SERVO_init();
     54c:	0e 94 ac 06 	call	0xd58	; 0xd58 <SERVO_init>
		SERVO_TurnON(FORWARD_Angle);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	84 eb       	ldi	r24, 0xB4	; 180
     556:	92 e4       	ldi	r25, 0x42	; 66
     558:	0e 94 b4 06 	call	0xd68	; 0xd68 <SERVO_TurnON>
		ULTRASOIC_init();
     55c:	0e 94 cc 06 	call	0xd98	; 0xd98 <ULTRASOIC_init>
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	93 ed       	ldi	r25, 0xD3	; 211
     564:	a0 e3       	ldi	r26, 0x30	; 48
     566:	81 50       	subi	r24, 0x01	; 1
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	a0 40       	sbci	r26, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <main+0xc0>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0xca>
     570:	00 00       	nop
		_delay_ms(1000);
		UltraSonicMode_SuperLoop();
     572:	0e 94 23 01 	call	0x246	; 0x246 <UltraSonicMode_SuperLoop>
	}
	else
	{
		LCD_GoToLocation(1,1);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
		LCD_SendString("BlueTooth ON");
     57e:	86 ed       	ldi	r24, 0xD6	; 214
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	93 ed       	ldi	r25, 0xD3	; 211
     58a:	a0 e3       	ldi	r26, 0x30	; 48
     58c:	81 50       	subi	r24, 0x01	; 1
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	a0 40       	sbci	r26, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <main+0xe6>
     594:	00 c0       	rjmp	.+0      	; 0x596 <main+0xf0>
     596:	00 00       	nop
		_delay_ms(1000);
		LCD_ClearDesplay();
     598:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
		
		ESP32_init();
     59c:	0e 94 07 03 	call	0x60e	; 0x60e <ESP32_init>
		WiFiMode_SuperLoop();
     5a0:	0e 94 92 00 	call	0x124	; 0x124 <WiFiMode_SuperLoop>

000005a4 <BUTTON_init>:
#include "../include/BUTTON_private.h"


void BUTTON_init(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     5a4:	84 30       	cpi	r24, 0x04	; 4
     5a6:	28 f4       	brcc	.+10     	; 0x5b2 <BUTTON_init+0xe>
     5a8:	68 30       	cpi	r22, 0x08	; 8
     5aa:	18 f4       	brcc	.+6      	; 0x5b2 <BUTTON_init+0xe>
	{
		DIO_SetPinDirection(ButtonPort,ButtonPin,DIO_PIN_INPUT);
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
     5b2:	08 95       	ret

000005b4 <BUTTON_ActivePullUp>:
	}
}

void BUTTON_ActivePullUp(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     5b4:	84 30       	cpi	r24, 0x04	; 4
     5b6:	20 f4       	brcc	.+8      	; 0x5c0 <BUTTON_ActivePullUp+0xc>
     5b8:	68 30       	cpi	r22, 0x08	; 8
     5ba:	10 f4       	brcc	.+4      	; 0x5c0 <BUTTON_ActivePullUp+0xc>
	{
		DIO_activePinInPullUpResistance(ButtonPort,ButtonPin);
     5bc:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_activePinInPullUpResistance>
     5c0:	08 95       	ret

000005c2 <BUTTON_ReadValue>:
	}
}

void BUTTON_ReadValue(u8 ButtonPort ,u8 ButtonPin,u8* PinValue,u8 BUTTON_STATUE)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     5c2:	84 30       	cpi	r24, 0x04	; 4
     5c4:	20 f4       	brcc	.+8      	; 0x5ce <BUTTON_ReadValue+0xc>
     5c6:	68 30       	cpi	r22, 0x08	; 8
     5c8:	10 f4       	brcc	.+4      	; 0x5ce <BUTTON_ReadValue+0xc>
	{
		DIO_ReadValue(ButtonPort,ButtonPin,PinValue);
     5ca:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_ReadValue>
     5ce:	08 95       	ret

000005d0 <BUZZER_init>:
#include "../include/BUZZER_interface.h"
#include "../include/BUZZER_private.h"

void BUZZER_init(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     5d0:	84 30       	cpi	r24, 0x04	; 4
     5d2:	28 f4       	brcc	.+10     	; 0x5de <BUZZER_init+0xe>
     5d4:	68 30       	cpi	r22, 0x08	; 8
     5d6:	18 f4       	brcc	.+6      	; 0x5de <BUZZER_init+0xe>
	{
		DIO_SetPinDirection(BuzzerPort,BuzzerPin,DIO_PIN_OUTPUT);
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
     5de:	08 95       	ret

000005e0 <BUZZER_TurnOn>:
}


void BUZZER_TurnOn(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     5e0:	84 30       	cpi	r24, 0x04	; 4
     5e2:	28 f4       	brcc	.+10     	; 0x5ee <BUZZER_TurnOn+0xe>
     5e4:	68 30       	cpi	r22, 0x08	; 8
     5e6:	18 f4       	brcc	.+6      	; 0x5ee <BUZZER_TurnOn+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_HIGH);
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     5ee:	08 95       	ret

000005f0 <BUZZER_TurnOff>:
	}
}

void BUZZER_TurnOff(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     5f0:	84 30       	cpi	r24, 0x04	; 4
     5f2:	28 f4       	brcc	.+10     	; 0x5fe <BUZZER_TurnOff+0xe>
     5f4:	68 30       	cpi	r22, 0x08	; 8
     5f6:	18 f4       	brcc	.+6      	; 0x5fe <BUZZER_TurnOff+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_LOW);
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     5fe:	08 95       	ret

00000600 <BUZZER_Toggle>:
	}
}	

void BUZZER_Toggle(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     600:	84 30       	cpi	r24, 0x04	; 4
     602:	20 f4       	brcc	.+8      	; 0x60c <BUZZER_Toggle+0xc>
     604:	68 30       	cpi	r22, 0x08	; 8
     606:	10 f4       	brcc	.+4      	; 0x60c <BUZZER_Toggle+0xc>
	{
		DIO_TogglePinValue(BuzzerPort,BuzzerPin);
     608:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_TogglePinValue>
     60c:	08 95       	ret

0000060e <ESP32_init>:
#include "../include/ESP32_private.h"


ESP32_init(void)
{
	UART_init();
     60e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <UART_init>
}
     612:	08 95       	ret

00000614 <ESP32_ReceiveChar>:

ESP32_ReceiveChar(u8* ReceiveData)
{
	UART_ReceiveChar(ReceiveData);	
     614:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <UART_ReceiveChar>
}
     618:	08 95       	ret

0000061a <ESP32_TransimitChar>:

ESP32_TransimitChar(u8 TransimitData)
{
	UART_TransmiteChar(TransimitData);
     61a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <UART_TransmiteChar>
}
     61e:	08 95       	ret

00000620 <ESP32_TransimitString>:

ESP32_TransimitString(u8* TransimitData)
{	
	UART_TransmiteString(TransimitData);	
     620:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <UART_TransmiteString>
     624:	08 95       	ret

00000626 <private_WriteHalfPort>:
{
	LCD_sendComnd(ShiftCmnd);
}

void private_WriteHalfPort (u8 Value)
{
     626:	cf 93       	push	r28
     628:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     62a:	80 fd       	sbrc	r24, 0
     62c:	06 c0       	rjmp	.+12     	; 0x63a <private_WriteHalfPort+0x14>
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	64 e0       	ldi	r22, 0x04	; 4
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     638:	05 c0       	rjmp	.+10     	; 0x644 <private_WriteHalfPort+0x1e>
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	64 e0       	ldi	r22, 0x04	; 4
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     644:	8c 2f       	mov	r24, r28
     646:	86 95       	lsr	r24
     648:	80 fd       	sbrc	r24, 0
     64a:	06 c0       	rjmp	.+12     	; 0x658 <private_WriteHalfPort+0x32>
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	65 e0       	ldi	r22, 0x05	; 5
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     656:	05 c0       	rjmp	.+10     	; 0x662 <private_WriteHalfPort+0x3c>
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	65 e0       	ldi	r22, 0x05	; 5
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     662:	8c 2f       	mov	r24, r28
     664:	86 95       	lsr	r24
     666:	86 95       	lsr	r24
     668:	80 fd       	sbrc	r24, 0
     66a:	06 c0       	rjmp	.+12     	; 0x678 <private_WriteHalfPort+0x52>
     66c:	82 e0       	ldi	r24, 0x02	; 2
     66e:	66 e0       	ldi	r22, 0x06	; 6
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     676:	05 c0       	rjmp	.+10     	; 0x682 <private_WriteHalfPort+0x5c>
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	66 e0       	ldi	r22, 0x06	; 6
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
     682:	c6 95       	lsr	r28
     684:	c6 95       	lsr	r28
     686:	c6 95       	lsr	r28
     688:	c0 fd       	sbrc	r28, 0
     68a:	06 c0       	rjmp	.+12     	; 0x698 <private_WriteHalfPort+0x72>
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	67 e0       	ldi	r22, 0x07	; 7
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <private_WriteHalfPort+0x7c>
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
}
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
     6a6:	cf 93       	push	r28
     6a8:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
     6be:	8c 2f       	mov	r24, r28
     6c0:	82 95       	swap	r24
     6c2:	8f 70       	andi	r24, 0x0F	; 15
     6c4:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     6d2:	8f e9       	ldi	r24, 0x9F	; 159
     6d4:	9f e0       	ldi	r25, 0x0F	; 15
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_sendComnd+0x30>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_sendComnd+0x36>
     6dc:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	63 e0       	ldi	r22, 0x03	; 3
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
     6e8:	8c 2f       	mov	r24, r28
     6ea:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     6f8:	8f e9       	ldi	r24, 0x9F	; 159
     6fa:	9f e0       	ldi	r25, 0x0F	; 15
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_sendComnd+0x56>
     700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_sendComnd+0x5c>
     702:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	63 e0       	ldi	r22, 0x03	; 3
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	64 e0       	ldi	r22, 0x04	; 4
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	67 e0       	ldi	r22, 0x07	; 7
     752:	41 e0       	ldi	r20, 0x01	; 1
     754:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
     758:	8f e7       	ldi	r24, 0x7F	; 127
     75a:	95 eb       	ldi	r25, 0xB5	; 181
     75c:	a1 e0       	ldi	r26, 0x01	; 1
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	90 40       	sbci	r25, 0x00	; 0
     762:	a0 40       	sbci	r26, 0x00	; 0
     764:	e1 f7       	brne	.-8      	; 0x75e <LCD_init+0x4c>
     766:	00 c0       	rjmp	.+0      	; 0x768 <LCD_init+0x56>
     768:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     78e:	af e9       	ldi	r26, 0x9F	; 159
     790:	bf e0       	ldi	r27, 0x0F	; 15
     792:	11 97       	sbiw	r26, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <LCD_init+0x80>
     796:	00 c0       	rjmp	.+0      	; 0x798 <LCD_init+0x86>
     798:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
     7a4:	88 e2       	ldi	r24, 0x28	; 40
     7a6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7aa:	b0 ef       	ldi	r27, 0xF0	; 240
     7ac:	ba 95       	dec	r27
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
     7b0:	8c e0       	ldi	r24, 0x0C	; 12
     7b2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
     7b6:	80 ef       	ldi	r24, 0xF0	; 240
     7b8:	8a 95       	dec	r24
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c2:	af e3       	ldi	r26, 0x3F	; 63
     7c4:	bf e1       	ldi	r27, 0x1F	; 31
     7c6:	11 97       	sbiw	r26, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCD_init+0xb4>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <LCD_init+0xba>
     7cc:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
     7ce:	86 e0       	ldi	r24, 0x06	; 6
     7d0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d4:	b0 ef       	ldi	r27, 0xF0	; 240
     7d6:	ba 95       	dec	r27
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
     7da:	08 95       	ret

000007dc <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
     7dc:	cf 93       	push	r28
     7de:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
     7f4:	8c 2f       	mov	r24, r28
     7f6:	82 95       	swap	r24
     7f8:	8f 70       	andi	r24, 0x0F	; 15
     7fa:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	63 e0       	ldi	r22, 0x03	; 3
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     808:	8f e9       	ldi	r24, 0x9F	; 159
     80a:	9f e0       	ldi	r25, 0x0F	; 15
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <LCD_sendChar+0x30>
     810:	00 c0       	rjmp	.+0      	; 0x812 <LCD_sendChar+0x36>
     812:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	63 e0       	ldi	r22, 0x03	; 3
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
     81e:	8c 2f       	mov	r24, r28
     820:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	63 e0       	ldi	r22, 0x03	; 3
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     82e:	8f e9       	ldi	r24, 0x9F	; 159
     830:	9f e0       	ldi	r25, 0x0F	; 15
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <LCD_sendChar+0x56>
     836:	00 c0       	rjmp	.+0      	; 0x838 <LCD_sendChar+0x5c>
     838:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	63 e0       	ldi	r22, 0x03	; 3
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
	while((*String_Data)!='\0')
     84e:	88 81       	ld	r24, Y
     850:	88 23       	and	r24, r24
     852:	31 f0       	breq	.+12     	; 0x860 <__stack+0x1>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}

void LCD_SendString (u8 *String_Data)
     854:	21 96       	adiw	r28, 0x01	; 1
{
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
     856:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_sendChar>
	#endif
}

void LCD_SendString (u8 *String_Data)
{
	while((*String_Data)!='\0')
     85a:	89 91       	ld	r24, Y+
     85c:	88 23       	and	r24, r24
     85e:	d9 f7       	brne	.-10     	; 0x856 <LCD_SendString+0xe>
	{
		LCD_sendChar(*String_Data);
		String_Data++;
	}
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <LCD_SendRealNumber>:

void LCD_SendRealNumber(f64 Number)
{
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	60 97       	sbiw	r28, 0x10	; 16
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	6b 01       	movw	r12, r22
     890:	7c 01       	movw	r14, r24
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	a9 01       	movw	r20, r18
     898:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__cmpsf2>
     89c:	88 23       	and	r24, r24
     89e:	5c f4       	brge	.+22     	; 0x8b6 <LCD_SendRealNumber+0x50>
	f32 tmpval = (Number < 0)? -Number : Number;
     8a0:	f7 fa       	bst	r15, 7
     8a2:	f0 94       	com	r15
     8a4:	f7 f8       	bld	r15, 7
     8a6:	f0 94       	com	r15
}

void LCD_SendRealNumber(f64 Number)
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f5 ee       	ldi	r31, 0xE5	; 229
     8ac:	8f 2e       	mov	r8, r31
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	9f 2e       	mov	r9, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <LCD_SendRealNumber+0x5c>
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f7 ee       	ldi	r31, 0xE7	; 231
     8ba:	8f 2e       	mov	r8, r31
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	9f 2e       	mov	r9, r31
     8c0:	f0 2d       	mov	r31, r0
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
	f32 tmpfrac = tmpval - (float)tmpint1;
	u16 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     8ce:	2d b7       	in	r18, 0x3d	; 61
     8d0:	3e b7       	in	r19, 0x3e	; 62
     8d2:	2a 50       	subi	r18, 0x0A	; 10
     8d4:	30 40       	sbci	r19, 0x00	; 0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	3e bf       	out	0x3e, r19	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	2d bf       	out	0x3d, r18	; 61
     8e0:	0d b7       	in	r16, 0x3d	; 61
     8e2:	1e b7       	in	r17, 0x3e	; 62
     8e4:	0f 5f       	subi	r16, 0xFF	; 255
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
     8e8:	5e 01       	movw	r10, r28
     8ea:	08 94       	sec
     8ec:	a1 1c       	adc	r10, r1
     8ee:	b1 1c       	adc	r11, r1
     8f0:	ed b7       	in	r30, 0x3d	; 61
     8f2:	fe b7       	in	r31, 0x3e	; 62
     8f4:	b2 82       	std	Z+2, r11	; 0x02
     8f6:	a1 82       	std	Z+1, r10	; 0x01
     8f8:	28 ee       	ldi	r18, 0xE8	; 232
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	f8 01       	movw	r30, r16
     8fe:	33 83       	std	Z+3, r19	; 0x03
     900:	22 83       	std	Z+2, r18	; 0x02
     902:	95 82       	std	Z+5, r9	; 0x05
     904:	84 82       	std	Z+4, r8	; 0x04
     906:	97 83       	std	Z+7, r25	; 0x07
     908:	86 83       	std	Z+6, r24	; 0x06
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
	f32 tmpfrac = tmpval - (float)tmpint1;
     90a:	bc 01       	movw	r22, r24
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatunsisf>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__subsf3>
	u16 tmpint2 = tmpfrac * 10000;
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e4       	ldi	r19, 0x40	; 64
     924:	4c e1       	ldi	r20, 0x1C	; 28
     926:	56 e4       	ldi	r21, 0x46	; 70
     928:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     92c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     934:	f8 01       	movw	r30, r16
     936:	91 87       	std	Z+9, r25	; 0x09
     938:	80 87       	std	Z+8, r24	; 0x08
     93a:	0e 94 c6 10 	call	0x218c	; 0x218c <sprintf>
	LCD_SendString(str);
     93e:	2d b7       	in	r18, 0x3d	; 61
     940:	3e b7       	in	r19, 0x3e	; 62
     942:	26 5f       	subi	r18, 0xF6	; 246
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	3e bf       	out	0x3e, r19	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	2d bf       	out	0x3d, r18	; 61
     950:	c5 01       	movw	r24, r10
     952:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
}
     956:	60 96       	adiw	r28, 0x10	; 16
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	bf 90       	pop	r11
     974:	af 90       	pop	r10
     976:	9f 90       	pop	r9
     978:	8f 90       	pop	r8
     97a:	08 95       	ret

0000097c <LCD_ClearDesplay>:

void LCD_ClearDesplay()
{
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
     982:	8f e3       	ldi	r24, 0x3F	; 63
     984:	9f e1       	ldi	r25, 0x1F	; 31
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <LCD_ClearDesplay+0xa>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <LCD_ClearDesplay+0x10>
     98c:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);	
     98e:	80 e8       	ldi	r24, 0x80	; 128
     990:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
}
     994:	08 95       	ret

00000996 <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <LCD_GoToLocation+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <LCD_GoToLocation+0x8>
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
     9a2:	90 e8       	ldi	r25, 0x80	; 128
     9a4:	99 83       	std	Y+1, r25	; 0x01
     9a6:	90 ec       	ldi	r25, 0xC0	; 192
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	94 e9       	ldi	r25, 0x94	; 148
     9ac:	9b 83       	std	Y+3, r25	; 0x03
     9ae:	94 ed       	ldi	r25, 0xD4	; 212
     9b0:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
     9b2:	81 50       	subi	r24, 0x01	; 1
     9b4:	fe 01       	movw	r30, r28
     9b6:	e6 0f       	add	r30, r22
     9b8:	f1 1d       	adc	r31, r1
     9ba:	90 81       	ld	r25, Z
     9bc:	89 0f       	add	r24, r25
     9be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c2:	8f e9       	ldi	r24, 0x9F	; 159
     9c4:	9f e0       	ldi	r25, 0x0F	; 15
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <LCD_GoToLocation+0x30>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <LCD_GoToLocation+0x36>
     9cc:	00 00       	nop
	_delay_us(1000);
}
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	a0 97       	sbiw	r28, 0x20	; 32
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
     9f4:	2d b7       	in	r18, 0x3d	; 61
     9f6:	3e b7       	in	r19, 0x3e	; 62
     9f8:	28 50       	subi	r18, 0x08	; 8
     9fa:	30 40       	sbci	r19, 0x00	; 0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	3e bf       	out	0x3e, r19	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	2d bf       	out	0x3d, r18	; 61
     a06:	ed b7       	in	r30, 0x3d	; 61
     a08:	fe b7       	in	r31, 0x3e	; 62
     a0a:	31 96       	adiw	r30, 0x01	; 1
     a0c:	8e 01       	movw	r16, r28
     a0e:	0f 5f       	subi	r16, 0xFF	; 255
     a10:	1f 4f       	sbci	r17, 0xFF	; 255
     a12:	ad b7       	in	r26, 0x3d	; 61
     a14:	be b7       	in	r27, 0x3e	; 62
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	1c 93       	st	X, r17
     a1a:	0e 93       	st	-X, r16
     a1c:	11 97       	sbiw	r26, 0x01	; 1
     a1e:	21 e1       	ldi	r18, 0x11	; 17
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	33 83       	std	Z+3, r19	; 0x03
     a24:	22 83       	std	Z+2, r18	; 0x02
     a26:	22 ef       	ldi	r18, 0xF2	; 242
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	35 83       	std	Z+5, r19	; 0x05
     a2c:	24 83       	std	Z+4, r18	; 0x04
     a2e:	97 83       	std	Z+7, r25	; 0x07
     a30:	86 83       	std	Z+6, r24	; 0x06
     a32:	0e 94 96 10 	call	0x212c	; 0x212c <snprintf>
	LCD_SendString(NumberString);
     a36:	2d b7       	in	r18, 0x3d	; 61
     a38:	3e b7       	in	r19, 0x3e	; 62
     a3a:	28 5f       	subi	r18, 0xF8	; 248
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	3e bf       	out	0x3e, r19	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	2d bf       	out	0x3d, r18	; 61
     a48:	c8 01       	movw	r24, r16
     a4a:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
}
     a4e:	a0 96       	adiw	r28, 0x20	; 32
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
     a6a:	86 2f       	mov	r24, r22
	LCD_GoToLocation(X_Location,LineNumber);
     a6c:	64 2f       	mov	r22, r20
     a6e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <LCD_Shift>:


void LCD_Shift(u8 ShiftCmnd)
{
	LCD_sendComnd(ShiftCmnd);
     a7e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
}
     a82:	08 95       	ret

00000a84 <LED_init>:
#include "../include/LED_config.h"


void LED_init(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     a84:	84 30       	cpi	r24, 0x04	; 4
     a86:	28 f4       	brcc	.+10     	; 0xa92 <LED_init+0xe>
     a88:	68 30       	cpi	r22, 0x08	; 8
     a8a:	18 f4       	brcc	.+6      	; 0xa92 <LED_init+0xe>
	{
		DIO_SetPinDirection(LedPort,LedPin,DIO_PIN_OUTPUT);
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
     a92:	08 95       	ret

00000a94 <LED_TurnON>:
}


void LED_TurnON(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     a94:	84 30       	cpi	r24, 0x04	; 4
     a96:	28 f4       	brcc	.+10     	; 0xaa2 <LED_TurnON+0xe>
     a98:	68 30       	cpi	r22, 0x08	; 8
     a9a:	18 f4       	brcc	.+6      	; 0xaa2 <LED_TurnON+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_HIGH);
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     aa2:	08 95       	ret

00000aa4 <LED_TurnOFF>:
}


void LED_TurnOFF(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     aa4:	84 30       	cpi	r24, 0x04	; 4
     aa6:	28 f4       	brcc	.+10     	; 0xab2 <LED_TurnOFF+0xe>
     aa8:	68 30       	cpi	r22, 0x08	; 8
     aaa:	18 f4       	brcc	.+6      	; 0xab2 <LED_TurnOFF+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_LOW);
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
     ab2:	08 95       	ret

00000ab4 <LED_Toggle>:
}


void LED_Toggle(u8 LedPort,u8 LedPin)
{
	 if (LedPort <=3 && LedPin<=7)
     ab4:	84 30       	cpi	r24, 0x04	; 4
     ab6:	20 f4       	brcc	.+8      	; 0xac0 <LED_Toggle+0xc>
     ab8:	68 30       	cpi	r22, 0x08	; 8
     aba:	10 f4       	brcc	.+4      	; 0xac0 <LED_Toggle+0xc>
	 {
		DIO_TogglePinValue(LedPort,LedPin);
     abc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_TogglePinValue>
     ac0:	08 95       	ret

00000ac2 <WHEEL_Init>:
#include "../include/MOTOR_config.h"

void WHEEL_Init()
{
	//Directions for both motors
	DIO_SetPinDirection(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_OUTPUT);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	64 e0       	ldi	r22, 0x04	; 4
     ac6:	41 e0       	ldi	r20, 0x01	; 1
     ac8:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_OUTPUT);
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	65 e0       	ldi	r22, 0x05	; 5
     ad0:	41 e0       	ldi	r20, 0x01	; 1
     ad2:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_OUTPUT);
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	66 e0       	ldi	r22, 0x06	; 6
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_OUTPUT);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	67 e0       	ldi	r22, 0x07	; 7
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	
	// Enable Settings for both motors
	DIO_SetPinDirection(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_OUTPUT); //ENABLE OC2
     aea:	83 e0       	ldi	r24, 0x03	; 3
     aec:	67 e0       	ldi	r22, 0x07	; 7
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	64 e0       	ldi	r22, 0x04	; 4
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	65 e0       	ldi	r22, 0x05	; 5
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	66 e0       	ldi	r22, 0x06	; 6
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	67 e0       	ldi	r22, 0x07	; 7
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
}
     b1c:	08 95       	ret

00000b1e <WHEEL_MoveForward>:

void WHEEL_MoveForward ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	67 e0       	ldi	r22, 0x07	; 7
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	64 e0       	ldi	r22, 0x04	; 4
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_HIGH);
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	65 e0       	ldi	r22, 0x05	; 5
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	66 e0       	ldi	r22, 0x06	; 6
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_HIGH);
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	67 e0       	ldi	r22, 0x07	; 7
     b4a:	41 e0       	ldi	r20, 0x01	; 1
     b4c:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
}
     b50:	08 95       	ret

00000b52 <WHEEL_MoveBackward>:

void WHEEL_MoveBackward ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	67 e0       	ldi	r22, 0x07	; 7
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_HIGH);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	64 e0       	ldi	r22, 0x04	; 4
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	65 e0       	ldi	r22, 0x05	; 5
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>

	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	66 e0       	ldi	r22, 0x06	; 6
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
}
     b84:	08 95       	ret

00000b86 <WHEEL_Stop>:


void WHEEL_Stop ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	67 e0       	ldi	r22, 0x07	; 7
     b8a:	41 e0       	ldi	r20, 0x01	; 1
     b8c:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	64 e0       	ldi	r22, 0x04	; 4
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	65 e0       	ldi	r22, 0x05	; 5
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	66 e0       	ldi	r22, 0x06	; 6
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
}
     bb8:	08 95       	ret

00000bba <WHEEL_MoveForwardRight>:


void WHEEL_MoveForwardRight ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	67 e0       	ldi	r22, 0x07	; 7
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	//RIGHT WHEELS STOP, LEFT WHEELS FORWARD
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	64 e0       	ldi	r22, 0x04	; 4
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_HIGH);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	65 e0       	ldi	r22, 0x05	; 5
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	66 e0       	ldi	r22, 0x06	; 6
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	67 e0       	ldi	r22, 0x07	; 7
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
}
     bec:	08 95       	ret

00000bee <WHEEL_MoveForwardleft>:

void WHEEL_MoveForwardleft ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	67 e0       	ldi	r22, 0x07	; 7
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	//LEFT WHEELS STOP, RIGHT WHEELS FORWARD
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	64 e0       	ldi	r22, 0x04	; 4
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	65 e0       	ldi	r22, 0x05	; 5
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	66 e0       	ldi	r22, 0x06	; 6
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_HIGH);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	67 e0       	ldi	r22, 0x07	; 7
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
}
     c20:	08 95       	ret

00000c22 <WHEEL_MoveBackwardleft>:

void WHEEL_MoveBackwardleft ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	67 e0       	ldi	r22, 0x07	; 7
     c26:	41 e0       	ldi	r20, 0x01	; 1
     c28:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	64 e0       	ldi	r22, 0x04	; 4
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	65 e0       	ldi	r22, 0x05	; 5
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_HIGH);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	66 e0       	ldi	r22, 0x06	; 6
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	67 e0       	ldi	r22, 0x07	; 7
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
}
     c54:	08 95       	ret

00000c56 <WHEEL_MoveBackwardRight>:

void WHEEL_MoveBackwardRight ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	67 e0       	ldi	r22, 0x07	; 7
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_HIGH);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	64 e0       	ldi	r22, 0x04	; 4
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	65 e0       	ldi	r22, 0x05	; 5
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	66 e0       	ldi	r22, 0x06	; 6
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	67 e0       	ldi	r22, 0x07	; 7
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
}
     c88:	08 95       	ret

00000c8a <WHEEL_TurnDirection>:

void WHEEL_TurnDirection ()
{
}
     c8a:	08 95       	ret

00000c8c <WHEEL_SendDutyCycleAndStart>:
void WHEEL_SendDutyCycleAndStart(u8 speed)
{
     c8c:	cf 93       	push	r28
     c8e:	c8 2f       	mov	r28, r24
	//WHEEL_Init();
	TMR2_init();
     c90:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <TMR2_init>
	TMR2_SetDutyCycleValue_FastPWM(speed); // RANGE FROM 0 to 100 
     c94:	6c 2f       	mov	r22, r28
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatunsisf>
     ca0:	0e 94 a7 0c 	call	0x194e	; 0x194e <TMR2_SetDutyCycleValue_FastPWM>
	TMR2_Start();
     ca4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <TMR2_Start>
}
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <WHEEL_AdjustSpeed>:
void WHEEL_AdjustSpeed ()
{
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
	static u8 speed = 0;
	u8 *PinValue;
	DIO_ReadValue(DIO_PORTB,DIO_PIN4,PinValue);
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	64 e0       	ldi	r22, 0x04	; 4
     cb4:	c0 e0       	ldi	r28, 0x00	; 0
     cb6:	d0 e0       	ldi	r29, 0x00	; 0
     cb8:	ae 01       	movw	r20, r28
     cba:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_ReadValue>
	if(*PinValue == 1)
     cbe:	88 81       	ld	r24, Y
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	81 f4       	brne	.+32     	; 0xce4 <WHEEL_AdjustSpeed+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	96 e1       	ldi	r25, 0x16	; 22
     cc8:	a1 e1       	ldi	r26, 0x11	; 17
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	90 40       	sbci	r25, 0x00	; 0
     cce:	a0 40       	sbci	r26, 0x00	; 0
     cd0:	e1 f7       	brne	.-8      	; 0xcca <WHEEL_AdjustSpeed+0x1e>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <WHEEL_AdjustSpeed+0x28>
     cd4:	00 00       	nop
	{
		_delay_ms(350);
		if(speed > 90)
     cd6:	80 91 f6 00 	lds	r24, 0x00F6
     cda:	8b 35       	cpi	r24, 0x5B	; 91
     cdc:	18 f0       	brcs	.+6      	; 0xce4 <WHEEL_AdjustSpeed+0x38>
		{
			speed+=10; // WHEEL_SpeedUP
     cde:	86 5f       	subi	r24, 0xF6	; 246
     ce0:	80 93 f6 00 	sts	0x00F6, r24
		}
	}
	DIO_ReadValue(DIO_PORTB,DIO_PIN5,PinValue);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	65 e0       	ldi	r22, 0x05	; 5
     ce8:	c0 e0       	ldi	r28, 0x00	; 0
     cea:	d0 e0       	ldi	r29, 0x00	; 0
     cec:	ae 01       	movw	r20, r28
     cee:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_ReadValue>
	if (*PinValue == 1)
     cf2:	88 81       	ld	r24, Y
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	81 f4       	brne	.+32     	; 0xd18 <WHEEL_AdjustSpeed+0x6c>
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	96 e1       	ldi	r25, 0x16	; 22
     cfc:	a1 e1       	ldi	r26, 0x11	; 17
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	90 40       	sbci	r25, 0x00	; 0
     d02:	a0 40       	sbci	r26, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <WHEEL_AdjustSpeed+0x52>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <WHEEL_AdjustSpeed+0x5c>
     d08:	00 00       	nop
	{
		_delay_ms(350);
		if(speed > 10)
     d0a:	80 91 f6 00 	lds	r24, 0x00F6
     d0e:	8b 30       	cpi	r24, 0x0B	; 11
     d10:	18 f0       	brcs	.+6      	; 0xd18 <WHEEL_AdjustSpeed+0x6c>
		{
			speed-=10; // WHEEL_SpeedUP
     d12:	8a 50       	subi	r24, 0x0A	; 10
     d14:	80 93 f6 00 	sts	0x00F6, r24
		}
		
		
	}
	DIO_ReadValue(DIO_PORTB,DIO_PIN6,PinValue);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	66 e0       	ldi	r22, 0x06	; 6
     d1c:	c0 e0       	ldi	r28, 0x00	; 0
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
     d20:	ae 01       	movw	r20, r28
     d22:	0e 94 3a 09 	call	0x1274	; 0x1274 <DIO_ReadValue>
	if (*PinValue == 1)
     d26:	88 81       	ld	r24, Y
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	59 f4       	brne	.+22     	; 0xd42 <WHEEL_AdjustSpeed+0x96>
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	96 e1       	ldi	r25, 0x16	; 22
     d30:	a1 e1       	ldi	r26, 0x11	; 17
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	90 40       	sbci	r25, 0x00	; 0
     d36:	a0 40       	sbci	r26, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <WHEEL_AdjustSpeed+0x86>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <WHEEL_AdjustSpeed+0x90>
     d3c:	00 00       	nop
	{
		_delay_ms(350);
		speed = 0; // WHEEL_SpeedReset
     d3e:	10 92 f6 00 	sts	0x00F6, r1
	}
	
	OCR2 = (256*speed)/100 ; 
     d42:	90 91 f6 00 	lds	r25, 0x00F6
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	64 e6       	ldi	r22, 0x64	; 100
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	0e 94 4d 10 	call	0x209a	; 0x209a <__divmodhi4>
     d50:	63 bd       	out	0x23, r22	; 35
	
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <SERVO_init>:
#include "../include/SERVO_interface.h"
#include "../include/SERVO_private.h"

void SERVO_init(void)
{
	DIO_SetPinDirection(TMR1_OC1A_PORT,TMR1_OC1A_PIN,DIO_PIN_OUTPUT);
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	65 e0       	ldi	r22, 0x05	; 5
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	TMR1_init();
     d62:	0e 94 0d 0c 	call	0x181a	; 0x181a <TMR1_init>
}
     d66:	08 95       	ret

00000d68 <SERVO_TurnON>:

void SERVO_TurnON(f32 Angle)
{
	f32 DutyCycle;
	DutyCycle=5.0+(Angle/36.0);
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e1       	ldi	r20, 0x10	; 16
     d6e:	52 e4       	ldi	r21, 0x42	; 66
     d70:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divsf3>
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 ea       	ldi	r20, 0xA0	; 160
     d7a:	50 e4       	ldi	r21, 0x40	; 64
     d7c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__addsf3>
     d80:	ab 01       	movw	r20, r22
     d82:	bc 01       	movw	r22, r24
	TMR1_SetDutyCycle_And_Freq_Value(50,DutyCycle);
     d84:	82 e3       	ldi	r24, 0x32	; 50
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 3a 0c 	call	0x1874	; 0x1874 <TMR1_SetDutyCycle_And_Freq_Value>
	TMR1_Start();
     d8c:	0e 94 26 0c 	call	0x184c	; 0x184c <TMR1_Start>
}
     d90:	08 95       	ret

00000d92 <SERVO_TurnOFF>:

void SERVO_TurnOFF()
{
	TMR1_Stop();
     d92:	0e 94 30 0c 	call	0x1860	; 0x1860 <TMR1_Stop>
}
     d96:	08 95       	ret

00000d98 <ULTRASOIC_init>:



void ULTRASOIC_init(void)
{
	DIO_SetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_OUTPUT);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	66 e0       	ldi	r22, 0x06	; 6
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_INPUT);
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	63 e0       	ldi	r22, 0x03	; 3
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinValue(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_HIGH);
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	63 e0       	ldi	r22, 0x03	; 3
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	EXTI_Enable(EXTI_INT1,EXTI_ANY_LOGICAL_CHANGE);
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	63 e0       	ldi	r22, 0x03	; 3
     dba:	0e 94 a0 0a 	call	0x1540	; 0x1540 <EXTI_Enable>
	TMR0_init();
     dbe:	0e 94 86 0b 	call	0x170c	; 0x170c <TMR0_init>
	TMR0_Start();
     dc2:	0e 94 91 0b 	call	0x1722	; 0x1722 <TMR0_Start>
}
     dc6:	08 95       	ret

00000dc8 <ULTRASOIC_GetDistance>:

void ULTRASOIC_GetDistance(f64* DistanceValue)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	ec 01       	movw	r28, r24
	if (!sensor_working)
     dce:	80 91 fc 00 	lds	r24, 0x00FC
     dd2:	88 23       	and	r24, r24
     dd4:	81 f4       	brne	.+32     	; 0xdf6 <ULTRASOIC_GetDistance+0x2e>
	{
		DIO_SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_HIGH);
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	66 e0       	ldi	r22, 0x06	; 6
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de0:	80 e5       	ldi	r24, 0x50	; 80
     de2:	8a 95       	dec	r24
     de4:	f1 f7       	brne	.-4      	; 0xde2 <ULTRASOIC_GetDistance+0x1a>
		_delay_us(15);
		DIO_SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_LOW);
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	66 e0       	ldi	r22, 0x06	; 6
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_SetPinValue>
		sensor_working=1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 fc 00 	sts	0x00FC, r24
	}		
	*DistanceValue=distance;	
     df6:	80 91 1b 01 	lds	r24, 0x011B
     dfa:	90 91 1c 01 	lds	r25, 0x011C
     dfe:	a0 91 1d 01 	lds	r26, 0x011D
     e02:	b0 91 1e 01 	lds	r27, 0x011E
     e06:	88 83       	st	Y, r24
     e08:	99 83       	std	Y+1, r25	; 0x01
     e0a:	aa 83       	std	Y+2, r26	; 0x02
     e0c:	bb 83       	std	Y+3, r27	; 0x03
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <__vector_2>:


void  __vector_2(void) __attribute__((signal));
void  __vector_2(void)
{
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
	if(sensor_working==1)
     e36:	80 91 fc 00 	lds	r24, 0x00FC
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__vector_2+0x2c>
     e3e:	53 c0       	rjmp	.+166    	; 0xee6 <__vector_2+0xd2>
	{
		if (rising_edge==0)
     e40:	80 91 fb 00 	lds	r24, 0x00FB
     e44:	88 23       	and	r24, r24
     e46:	69 f4       	brne	.+26     	; 0xe62 <__vector_2+0x4e>
		{
			TCNT0=0X00;
     e48:	12 be       	out	0x32, r1	; 50
			rising_edge=1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 fb 00 	sts	0x00FB, r24
			timer_counter=0;
     e50:	10 92 f7 00 	sts	0x00F7, r1
     e54:	10 92 f8 00 	sts	0x00F8, r1
     e58:	10 92 f9 00 	sts	0x00F9, r1
     e5c:	10 92 fa 00 	sts	0x00FA, r1
     e60:	42 c0       	rjmp	.+132    	; 0xee6 <__vector_2+0xd2>
		}
		else
		{
			distance=(343*(timer_counter*256+TCNT0)/320000)+1;
     e62:	22 b7       	in	r18, 0x32	; 50
     e64:	80 91 f7 00 	lds	r24, 0x00F7
     e68:	90 91 f8 00 	lds	r25, 0x00F8
     e6c:	a0 91 f9 00 	lds	r26, 0x00F9
     e70:	b0 91 fa 00 	lds	r27, 0x00FA
     e74:	66 27       	eor	r22, r22
     e76:	78 2f       	mov	r23, r24
     e78:	89 2f       	mov	r24, r25
     e7a:	9a 2f       	mov	r25, r26
     e7c:	62 0f       	add	r22, r18
     e7e:	71 1d       	adc	r23, r1
     e80:	81 1d       	adc	r24, r1
     e82:	91 1d       	adc	r25, r1
     e84:	27 e5       	ldi	r18, 0x57	; 87
     e86:	31 e0       	ldi	r19, 0x01	; 1
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	32 ee       	ldi	r19, 0xE2	; 226
     e94:	44 e0       	ldi	r20, 0x04	; 4
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__udivmodsi4>
     e9c:	ca 01       	movw	r24, r20
     e9e:	b9 01       	movw	r22, r18
     ea0:	6f 5f       	subi	r22, 0xFF	; 255
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	8f 4f       	sbci	r24, 0xFF	; 255
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatunsisf>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	80 93 1b 01 	sts	0x011B, r24
     eb4:	90 93 1c 01 	sts	0x011C, r25
     eb8:	a0 93 1d 01 	sts	0x011D, r26
     ebc:	b0 93 1e 01 	sts	0x011E, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	93 ef       	ldi	r25, 0xF3	; 243
     ec4:	a1 e0       	ldi	r26, 0x01	; 1
     ec6:	81 50       	subi	r24, 0x01	; 1
     ec8:	90 40       	sbci	r25, 0x00	; 0
     eca:	a0 40       	sbci	r26, 0x00	; 0
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <__vector_2+0xb2>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <__vector_2+0xbc>
     ed0:	00 00       	nop
			_delay_ms(40);
			timer_counter=0;
     ed2:	10 92 f7 00 	sts	0x00F7, r1
     ed6:	10 92 f8 00 	sts	0x00F8, r1
     eda:	10 92 f9 00 	sts	0x00F9, r1
     ede:	10 92 fa 00 	sts	0x00FA, r1
			rising_edge=0;
     ee2:	10 92 fb 00 	sts	0x00FB, r1
		}
	}
}
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	7f 91       	pop	r23
     ef4:	6f 91       	pop	r22
     ef6:	5f 91       	pop	r21
     ef8:	4f 91       	pop	r20
     efa:	3f 91       	pop	r19
     efc:	2f 91       	pop	r18
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	0f 90       	pop	r0
     f04:	1f 90       	pop	r1
     f06:	18 95       	reti

00000f08 <__vector_11>:


void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     f08:	1f 92       	push	r1
     f0a:	0f 92       	push	r0
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	0f 92       	push	r0
     f10:	11 24       	eor	r1, r1
     f12:	2f 93       	push	r18
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
	timer_counter++;
     f1c:	80 91 f7 00 	lds	r24, 0x00F7
     f20:	90 91 f8 00 	lds	r25, 0x00F8
     f24:	a0 91 f9 00 	lds	r26, 0x00F9
     f28:	b0 91 fa 00 	lds	r27, 0x00FA
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	a1 1d       	adc	r26, r1
     f30:	b1 1d       	adc	r27, r1
     f32:	80 93 f7 00 	sts	0x00F7, r24
     f36:	90 93 f8 00 	sts	0x00F8, r25
     f3a:	a0 93 f9 00 	sts	0x00F9, r26
     f3e:	b0 93 fa 00 	sts	0x00FA, r27
	if( timer_counter >1462)
     f42:	87 3b       	cpi	r24, 0xB7	; 183
     f44:	25 e0       	ldi	r18, 0x05	; 5
     f46:	92 07       	cpc	r25, r18
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	a2 07       	cpc	r26, r18
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	b2 07       	cpc	r27, r18
     f50:	68 f0       	brcs	.+26     	; 0xf6c <__vector_11+0x64>
	{
		TCNT0 = 0x00;
     f52:	12 be       	out	0x32, r1	; 50
		sensor_working=0;
     f54:	10 92 fc 00 	sts	0x00FC, r1
		rising_edge=0;
     f58:	10 92 fb 00 	sts	0x00FB, r1
		timer_counter=0;
     f5c:	10 92 f7 00 	sts	0x00F7, r1
     f60:	10 92 f8 00 	sts	0x00F8, r1
     f64:	10 92 f9 00 	sts	0x00F9, r1
     f68:	10 92 fa 00 	sts	0x00FA, r1
	}
	
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	2f 91       	pop	r18
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	08 f0       	brcs	.+2      	; 0xf86 <DIO_SetPinDirection+0x6>
     f84:	8b c0       	rjmp	.+278    	; 0x109c <DIO_SetPinDirection+0x11c>
     f86:	68 30       	cpi	r22, 0x08	; 8
     f88:	08 f0       	brcs	.+2      	; 0xf8c <DIO_SetPinDirection+0xc>
     f8a:	8a c0       	rjmp	.+276    	; 0x10a0 <DIO_SetPinDirection+0x120>
     f8c:	42 30       	cpi	r20, 0x02	; 2
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <DIO_SetPinDirection+0x12>
     f90:	89 c0       	rjmp	.+274    	; 0x10a4 <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	41 f1       	breq	.+80     	; 0xfe6 <DIO_SetPinDirection+0x66>
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	38 f0       	brcs	.+14     	; 0xfa8 <DIO_SetPinDirection+0x28>
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_SetPinDirection+0x20>
     f9e:	41 c0       	rjmp	.+130    	; 0x1022 <DIO_SetPinDirection+0xa2>
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <DIO_SetPinDirection+0x26>
     fa4:	81 c0       	rjmp	.+258    	; 0x10a8 <DIO_SetPinDirection+0x128>
     fa6:	5b c0       	rjmp	.+182    	; 0x105e <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     fa8:	41 30       	cpi	r20, 0x01	; 1
     faa:	71 f4       	brne	.+28     	; 0xfc8 <DIO_SetPinDirection+0x48>
     fac:	2a b3       	in	r18, 0x1a	; 26
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	ac 01       	movw	r20, r24
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_SetPinDirection+0x3a>
     fb6:	44 0f       	add	r20, r20
     fb8:	55 1f       	adc	r21, r21
     fba:	6a 95       	dec	r22
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_SetPinDirection+0x36>
     fbe:	ba 01       	movw	r22, r20
     fc0:	62 2b       	or	r22, r18
     fc2:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     fc8:	2a b3       	in	r18, 0x1a	; 26
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	ac 01       	movw	r20, r24
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_SetPinDirection+0x56>
     fd2:	44 0f       	add	r20, r20
     fd4:	55 1f       	adc	r21, r21
     fd6:	6a 95       	dec	r22
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_SetPinDirection+0x52>
     fda:	ba 01       	movw	r22, r20
     fdc:	60 95       	com	r22
     fde:	62 23       	and	r22, r18
     fe0:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     fe6:	41 30       	cpi	r20, 0x01	; 1
     fe8:	69 f4       	brne	.+26     	; 0x1004 <DIO_SetPinDirection+0x84>
     fea:	47 b3       	in	r20, 0x17	; 23
     fec:	21 e0       	ldi	r18, 0x01	; 1
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	c9 01       	movw	r24, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_SetPinDirection+0x78>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	6a 95       	dec	r22
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_SetPinDirection+0x74>
     ffc:	84 2b       	or	r24, r20
     ffe:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
    1004:	27 b3       	in	r18, 0x17	; 23
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	ac 01       	movw	r20, r24
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_SetPinDirection+0x92>
    100e:	44 0f       	add	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	6a 95       	dec	r22
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_SetPinDirection+0x8e>
    1016:	ba 01       	movw	r22, r20
    1018:	60 95       	com	r22
    101a:	62 23       	and	r22, r18
    101c:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
    1022:	41 30       	cpi	r20, 0x01	; 1
    1024:	69 f4       	brne	.+26     	; 0x1040 <DIO_SetPinDirection+0xc0>
    1026:	44 b3       	in	r20, 0x14	; 20
    1028:	21 e0       	ldi	r18, 0x01	; 1
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	c9 01       	movw	r24, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_SetPinDirection+0xb4>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	6a 95       	dec	r22
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_SetPinDirection+0xb0>
    1038:	84 2b       	or	r24, r20
    103a:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
    1040:	24 b3       	in	r18, 0x14	; 20
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	ac 01       	movw	r20, r24
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_SetPinDirection+0xce>
    104a:	44 0f       	add	r20, r20
    104c:	55 1f       	adc	r21, r21
    104e:	6a 95       	dec	r22
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_SetPinDirection+0xca>
    1052:	ba 01       	movw	r22, r20
    1054:	60 95       	com	r22
    1056:	62 23       	and	r22, r18
    1058:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
    105e:	41 30       	cpi	r20, 0x01	; 1
    1060:	71 f4       	brne	.+28     	; 0x107e <DIO_SetPinDirection+0xfe>
    1062:	21 b3       	in	r18, 0x11	; 17
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	ac 01       	movw	r20, r24
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_SetPinDirection+0xf0>
    106c:	44 0f       	add	r20, r20
    106e:	55 1f       	adc	r21, r21
    1070:	6a 95       	dec	r22
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_SetPinDirection+0xec>
    1074:	ba 01       	movw	r22, r20
    1076:	62 2b       	or	r22, r18
    1078:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
    107e:	21 b3       	in	r18, 0x11	; 17
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	ac 01       	movw	r20, r24
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_SetPinDirection+0x10c>
    1088:	44 0f       	add	r20, r20
    108a:	55 1f       	adc	r21, r21
    108c:	6a 95       	dec	r22
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_SetPinDirection+0x108>
    1090:	ba 01       	movw	r22, r20
    1092:	60 95       	com	r22
    1094:	62 23       	and	r22, r18
    1096:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	08 95       	ret
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	08 95       	ret
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    10a8:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    10aa:	08 95       	ret

000010ac <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <DIO_SetPinValue+0x6>
    10b0:	8b c0       	rjmp	.+278    	; 0x11c8 <DIO_SetPinValue+0x11c>
    10b2:	68 30       	cpi	r22, 0x08	; 8
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <DIO_SetPinValue+0xc>
    10b6:	8a c0       	rjmp	.+276    	; 0x11cc <DIO_SetPinValue+0x120>
    10b8:	42 30       	cpi	r20, 0x02	; 2
    10ba:	08 f0       	brcs	.+2      	; 0x10be <DIO_SetPinValue+0x12>
    10bc:	89 c0       	rjmp	.+274    	; 0x11d0 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	41 f1       	breq	.+80     	; 0x1112 <DIO_SetPinValue+0x66>
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	38 f0       	brcs	.+14     	; 0x10d4 <DIO_SetPinValue+0x28>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	09 f4       	brne	.+2      	; 0x10cc <DIO_SetPinValue+0x20>
    10ca:	41 c0       	rjmp	.+130    	; 0x114e <DIO_SetPinValue+0xa2>
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <DIO_SetPinValue+0x26>
    10d0:	81 c0       	rjmp	.+258    	; 0x11d4 <DIO_SetPinValue+0x128>
    10d2:	5b c0       	rjmp	.+182    	; 0x118a <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
    10d4:	41 30       	cpi	r20, 0x01	; 1
    10d6:	71 f4       	brne	.+28     	; 0x10f4 <DIO_SetPinValue+0x48>
    10d8:	2b b3       	in	r18, 0x1b	; 27
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	ac 01       	movw	r20, r24
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_SetPinValue+0x3a>
    10e2:	44 0f       	add	r20, r20
    10e4:	55 1f       	adc	r21, r21
    10e6:	6a 95       	dec	r22
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_SetPinValue+0x36>
    10ea:	ba 01       	movw	r22, r20
    10ec:	62 2b       	or	r22, r18
    10ee:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
    10f4:	2b b3       	in	r18, 0x1b	; 27
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	ac 01       	movw	r20, r24
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_SetPinValue+0x56>
    10fe:	44 0f       	add	r20, r20
    1100:	55 1f       	adc	r21, r21
    1102:	6a 95       	dec	r22
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_SetPinValue+0x52>
    1106:	ba 01       	movw	r22, r20
    1108:	60 95       	com	r22
    110a:	62 23       	and	r22, r18
    110c:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
    1112:	41 30       	cpi	r20, 0x01	; 1
    1114:	69 f4       	brne	.+26     	; 0x1130 <DIO_SetPinValue+0x84>
    1116:	48 b3       	in	r20, 0x18	; 24
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	c9 01       	movw	r24, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_SetPinValue+0x78>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	6a 95       	dec	r22
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_SetPinValue+0x74>
    1128:	84 2b       	or	r24, r20
    112a:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
    1130:	28 b3       	in	r18, 0x18	; 24
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	ac 01       	movw	r20, r24
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_SetPinValue+0x92>
    113a:	44 0f       	add	r20, r20
    113c:	55 1f       	adc	r21, r21
    113e:	6a 95       	dec	r22
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_SetPinValue+0x8e>
    1142:	ba 01       	movw	r22, r20
    1144:	60 95       	com	r22
    1146:	62 23       	and	r22, r18
    1148:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
    114e:	41 30       	cpi	r20, 0x01	; 1
    1150:	69 f4       	brne	.+26     	; 0x116c <DIO_SetPinValue+0xc0>
    1152:	45 b3       	in	r20, 0x15	; 21
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	c9 01       	movw	r24, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_SetPinValue+0xb4>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	6a 95       	dec	r22
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_SetPinValue+0xb0>
    1164:	84 2b       	or	r24, r20
    1166:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
    116c:	25 b3       	in	r18, 0x15	; 21
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	ac 01       	movw	r20, r24
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_SetPinValue+0xce>
    1176:	44 0f       	add	r20, r20
    1178:	55 1f       	adc	r21, r21
    117a:	6a 95       	dec	r22
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_SetPinValue+0xca>
    117e:	ba 01       	movw	r22, r20
    1180:	60 95       	com	r22
    1182:	62 23       	and	r22, r18
    1184:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
    118a:	41 30       	cpi	r20, 0x01	; 1
    118c:	71 f4       	brne	.+28     	; 0x11aa <DIO_SetPinValue+0xfe>
    118e:	22 b3       	in	r18, 0x12	; 18
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	ac 01       	movw	r20, r24
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_SetPinValue+0xf0>
    1198:	44 0f       	add	r20, r20
    119a:	55 1f       	adc	r21, r21
    119c:	6a 95       	dec	r22
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_SetPinValue+0xec>
    11a0:	ba 01       	movw	r22, r20
    11a2:	62 2b       	or	r22, r18
    11a4:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
    11aa:	22 b3       	in	r18, 0x12	; 18
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	ac 01       	movw	r20, r24
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_SetPinValue+0x10c>
    11b4:	44 0f       	add	r20, r20
    11b6:	55 1f       	adc	r21, r21
    11b8:	6a 95       	dec	r22
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_SetPinValue+0x108>
    11bc:	ba 01       	movw	r22, r20
    11be:	60 95       	com	r22
    11c0:	62 23       	and	r22, r18
    11c2:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	08 95       	ret
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	08 95       	ret
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    11d6:	08 95       	ret

000011d8 <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	08 f0       	brcs	.+2      	; 0x11de <DIO_TogglePinValue+0x6>
    11dc:	45 c0       	rjmp	.+138    	; 0x1268 <DIO_TogglePinValue+0x90>
    11de:	68 30       	cpi	r22, 0x08	; 8
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <DIO_TogglePinValue+0xc>
    11e2:	44 c0       	rjmp	.+136    	; 0x126c <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	b1 f0       	breq	.+44     	; 0x1214 <DIO_TogglePinValue+0x3c>
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	30 f0       	brcs	.+12     	; 0x11f8 <DIO_TogglePinValue+0x20>
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	01 f1       	breq	.+64     	; 0x1230 <DIO_TogglePinValue+0x58>
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <DIO_TogglePinValue+0x1e>
    11f4:	3d c0       	rjmp	.+122    	; 0x1270 <DIO_TogglePinValue+0x98>
    11f6:	2a c0       	rjmp	.+84     	; 0x124c <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
    11f8:	2b b3       	in	r18, 0x1b	; 27
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	ac 01       	movw	r20, r24
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_TogglePinValue+0x2e>
    1202:	44 0f       	add	r20, r20
    1204:	55 1f       	adc	r21, r21
    1206:	6a 95       	dec	r22
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_TogglePinValue+0x2a>
    120a:	ba 01       	movw	r22, r20
    120c:	62 27       	eor	r22, r18
    120e:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1210:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
    1212:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
    1214:	28 b3       	in	r18, 0x18	; 24
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	ac 01       	movw	r20, r24
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_TogglePinValue+0x4a>
    121e:	44 0f       	add	r20, r20
    1220:	55 1f       	adc	r21, r21
    1222:	6a 95       	dec	r22
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_TogglePinValue+0x46>
    1226:	ba 01       	movw	r22, r20
    1228:	62 27       	eor	r22, r18
    122a:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    122c:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
    122e:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
    1230:	25 b3       	in	r18, 0x15	; 21
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	ac 01       	movw	r20, r24
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_TogglePinValue+0x66>
    123a:	44 0f       	add	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	6a 95       	dec	r22
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_TogglePinValue+0x62>
    1242:	ba 01       	movw	r22, r20
    1244:	62 27       	eor	r22, r18
    1246:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1248:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
    124a:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
    124c:	22 b3       	in	r18, 0x12	; 18
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	ac 01       	movw	r20, r24
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_TogglePinValue+0x82>
    1256:	44 0f       	add	r20, r20
    1258:	55 1f       	adc	r21, r21
    125a:	6a 95       	dec	r22
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_TogglePinValue+0x7e>
    125e:	ba 01       	movw	r22, r20
    1260:	62 27       	eor	r22, r18
    1262:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1264:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
    1266:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	08 95       	ret
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1270:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1272:	08 95       	ret

00001274 <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	08 f0       	brcs	.+2      	; 0x127a <DIO_ReadValue+0x6>
    1278:	49 c0       	rjmp	.+146    	; 0x130c <DIO_ReadValue+0x98>
    127a:	68 30       	cpi	r22, 0x08	; 8
    127c:	08 f0       	brcs	.+2      	; 0x1280 <DIO_ReadValue+0xc>
    127e:	48 c0       	rjmp	.+144    	; 0x1310 <DIO_ReadValue+0x9c>
    1280:	41 15       	cp	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <DIO_ReadValue+0x14>
    1286:	46 c0       	rjmp	.+140    	; 0x1314 <DIO_ReadValue+0xa0>
	{
		switch (PortId)
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	b1 f0       	breq	.+44     	; 0x12b8 <DIO_ReadValue+0x44>
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	30 f0       	brcs	.+12     	; 0x129c <DIO_ReadValue+0x28>
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	01 f1       	breq	.+64     	; 0x12d4 <DIO_ReadValue+0x60>
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	09 f0       	breq	.+2      	; 0x129a <DIO_ReadValue+0x26>
    1298:	3f c0       	rjmp	.+126    	; 0x1318 <DIO_ReadValue+0xa4>
    129a:	2a c0       	rjmp	.+84     	; 0x12f0 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
    129c:	89 b3       	in	r24, 0x19	; 25
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9c 01       	movw	r18, r24
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_ReadValue+0x34>
    12a4:	35 95       	asr	r19
    12a6:	27 95       	ror	r18
    12a8:	6a 95       	dec	r22
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_ReadValue+0x30>
    12ac:	b9 01       	movw	r22, r18
    12ae:	61 70       	andi	r22, 0x01	; 1
    12b0:	fa 01       	movw	r30, r20
    12b2:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
    12b6:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
    12b8:	86 b3       	in	r24, 0x16	; 22
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c 01       	movw	r18, r24
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_ReadValue+0x50>
    12c0:	35 95       	asr	r19
    12c2:	27 95       	ror	r18
    12c4:	6a 95       	dec	r22
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_ReadValue+0x4c>
    12c8:	b9 01       	movw	r22, r18
    12ca:	61 70       	andi	r22, 0x01	; 1
    12cc:	fa 01       	movw	r30, r20
    12ce:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12d0:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
    12d2:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
    12d4:	83 b3       	in	r24, 0x13	; 19
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_ReadValue+0x6c>
    12dc:	35 95       	asr	r19
    12de:	27 95       	ror	r18
    12e0:	6a 95       	dec	r22
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_ReadValue+0x68>
    12e4:	b9 01       	movw	r22, r18
    12e6:	61 70       	andi	r22, 0x01	; 1
    12e8:	fa 01       	movw	r30, r20
    12ea:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12ec:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
    12ee:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
    12f0:	80 b3       	in	r24, 0x10	; 16
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 01       	movw	r18, r24
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_ReadValue+0x88>
    12f8:	35 95       	asr	r19
    12fa:	27 95       	ror	r18
    12fc:	6a 95       	dec	r22
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_ReadValue+0x84>
    1300:	b9 01       	movw	r22, r18
    1302:	61 70       	andi	r22, 0x01	; 1
    1304:	fa 01       	movw	r30, r20
    1306:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1308:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
    130a:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	08 95       	ret
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	08 95       	ret
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1318:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    131a:	08 95       	ret

0000131c <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	08 f0       	brcs	.+2      	; 0x1322 <DIO_activePinInPullUpResistance+0x6>
    1320:	45 c0       	rjmp	.+138    	; 0x13ac <DIO_activePinInPullUpResistance+0x90>
    1322:	68 30       	cpi	r22, 0x08	; 8
    1324:	08 f0       	brcs	.+2      	; 0x1328 <DIO_activePinInPullUpResistance+0xc>
    1326:	44 c0       	rjmp	.+136    	; 0x13b0 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	b1 f0       	breq	.+44     	; 0x1358 <DIO_activePinInPullUpResistance+0x3c>
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	30 f0       	brcs	.+12     	; 0x133c <DIO_activePinInPullUpResistance+0x20>
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	01 f1       	breq	.+64     	; 0x1374 <DIO_activePinInPullUpResistance+0x58>
    1334:	83 30       	cpi	r24, 0x03	; 3
    1336:	09 f0       	breq	.+2      	; 0x133a <DIO_activePinInPullUpResistance+0x1e>
    1338:	3d c0       	rjmp	.+122    	; 0x13b4 <DIO_activePinInPullUpResistance+0x98>
    133a:	2a c0       	rjmp	.+84     	; 0x1390 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
    133c:	2b b3       	in	r18, 0x1b	; 27
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	ac 01       	movw	r20, r24
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_activePinInPullUpResistance+0x2e>
    1346:	44 0f       	add	r20, r20
    1348:	55 1f       	adc	r21, r21
    134a:	6a 95       	dec	r22
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_activePinInPullUpResistance+0x2a>
    134e:	ba 01       	movw	r22, r20
    1350:	62 2b       	or	r22, r18
    1352:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1354:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
    1356:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
    1358:	28 b3       	in	r18, 0x18	; 24
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	ac 01       	movw	r20, r24
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_activePinInPullUpResistance+0x4a>
    1362:	44 0f       	add	r20, r20
    1364:	55 1f       	adc	r21, r21
    1366:	6a 95       	dec	r22
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_activePinInPullUpResistance+0x46>
    136a:	ba 01       	movw	r22, r20
    136c:	62 2b       	or	r22, r18
    136e:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1370:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
    1372:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
    1374:	25 b3       	in	r18, 0x15	; 21
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	ac 01       	movw	r20, r24
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_activePinInPullUpResistance+0x66>
    137e:	44 0f       	add	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	6a 95       	dec	r22
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_activePinInPullUpResistance+0x62>
    1386:	ba 01       	movw	r22, r20
    1388:	62 2b       	or	r22, r18
    138a:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    138c:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
    138e:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
    1390:	22 b3       	in	r18, 0x12	; 18
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	ac 01       	movw	r20, r24
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_activePinInPullUpResistance+0x82>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	6a 95       	dec	r22
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_activePinInPullUpResistance+0x7e>
    13a2:	ba 01       	movw	r22, r20
    13a4:	62 2b       	or	r22, r18
    13a6:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
    13aa:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	08 95       	ret
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13b4:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
    13b6:	08 95       	ret

000013b8 <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	a8 f5       	brcc	.+106    	; 0x1426 <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 f0       	breq	.+36     	; 0x13e4 <DIO_setPortDirection+0x2c>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	28 f0       	brcs	.+10     	; 0x13ce <DIO_setPortDirection+0x16>
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	c9 f0       	breq	.+50     	; 0x13fa <DIO_setPortDirection+0x42>
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	79 f5       	brne	.+94     	; 0x142a <DIO_setPortDirection+0x72>
    13cc:	21 c0       	rjmp	.+66     	; 0x1410 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    13ce:	6f 3f       	cpi	r22, 0xFF	; 255
    13d0:	29 f4       	brne	.+10     	; 0x13dc <DIO_setPortDirection+0x24>
    13d2:	8a b3       	in	r24, 0x1a	; 26
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    13dc:	8a b3       	in	r24, 0x1a	; 26
    13de:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    13e4:	6f 3f       	cpi	r22, 0xFF	; 255
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <DIO_setPortDirection+0x3a>
    13e8:	87 b3       	in	r24, 0x17	; 23
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    13f2:	87 b3       	in	r24, 0x17	; 23
    13f4:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    13fa:	6f 3f       	cpi	r22, 0xFF	; 255
    13fc:	29 f4       	brne	.+10     	; 0x1408 <DIO_setPortDirection+0x50>
    13fe:	84 b3       	in	r24, 0x14	; 20
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    1408:	84 b3       	in	r24, 0x14	; 20
    140a:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1410:	6f 3f       	cpi	r22, 0xFF	; 255
    1412:	29 f4       	brne	.+10     	; 0x141e <DIO_setPortDirection+0x66>
    1414:	81 b3       	in	r24, 0x11	; 17
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    141e:	81 b3       	in	r24, 0x11	; 17
    1420:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    142a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    142c:	08 95       	ret

0000142e <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	a8 f4       	brcc	.+42     	; 0x145c <DIO_setPortValue+0x2e>
	{
		switch(PortId)
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	51 f0       	breq	.+20     	; 0x144a <DIO_setPortValue+0x1c>
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	28 f0       	brcs	.+10     	; 0x1444 <DIO_setPortValue+0x16>
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	49 f0       	breq	.+18     	; 0x1450 <DIO_setPortValue+0x22>
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	79 f4       	brne	.+30     	; 0x1460 <DIO_setPortValue+0x32>
    1442:	09 c0       	rjmp	.+18     	; 0x1456 <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
    1444:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1446:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
    1448:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
    144a:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    144c:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
    144e:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
    1450:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1452:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
    1454:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
    1456:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1458:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
    145a:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1460:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1462:	08 95       	ret

00001464 <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	00 f5       	brcc	.+64     	; 0x14a8 <DIO_getPortValue+0x44>
    1468:	61 15       	cp	r22, r1
    146a:	71 05       	cpc	r23, r1
    146c:	f9 f0       	breq	.+62     	; 0x14ac <DIO_getPortValue+0x48>
	{
		switch(PortId)
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	61 f0       	breq	.+24     	; 0x148a <DIO_getPortValue+0x26>
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	28 f0       	brcs	.+10     	; 0x1480 <DIO_getPortValue+0x1c>
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	69 f0       	breq	.+26     	; 0x1494 <DIO_getPortValue+0x30>
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	c9 f4       	brne	.+50     	; 0x14b0 <DIO_getPortValue+0x4c>
    147e:	0f c0       	rjmp	.+30     	; 0x149e <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
    1480:	8b b3       	in	r24, 0x1b	; 27
    1482:	fb 01       	movw	r30, r22
    1484:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1486:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
    1488:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
    148a:	88 b3       	in	r24, 0x18	; 24
    148c:	fb 01       	movw	r30, r22
    148e:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1490:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
    1492:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
    1494:	85 b3       	in	r24, 0x15	; 21
    1496:	fb 01       	movw	r30, r22
    1498:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    149a:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
    149c:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
    149e:	82 b3       	in	r24, 0x12	; 18
    14a0:	fb 01       	movw	r30, r22
    14a2:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14a4:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
    14a6:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	08 95       	ret
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    14b2:	08 95       	ret

000014b4 <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	e8 f4       	brcc	.+58     	; 0x14f2 <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <DIO_togglePortValue+0x20>
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	28 f0       	brcs	.+10     	; 0x14ca <DIO_togglePortValue+0x16>
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	69 f0       	breq	.+26     	; 0x14de <DIO_togglePortValue+0x2a>
    14c4:	83 30       	cpi	r24, 0x03	; 3
    14c6:	b9 f4       	brne	.+46     	; 0x14f6 <DIO_togglePortValue+0x42>
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
    14ca:	8b b3       	in	r24, 0x1b	; 27
    14cc:	80 95       	com	r24
    14ce:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14d0:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
    14d2:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
    14d4:	88 b3       	in	r24, 0x18	; 24
    14d6:	80 95       	com	r24
    14d8:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14da:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
    14dc:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
    14de:	85 b3       	in	r24, 0x15	; 21
    14e0:	80 95       	com	r24
    14e2:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14e4:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
    14e6:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
    14e8:	82 b3       	in	r24, 0x12	; 18
    14ea:	80 95       	com	r24
    14ec:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14ee:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
    14f0:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    14f8:	08 95       	ret

000014fa <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	e8 f4       	brcc	.+58     	; 0x1538 <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	61 f0       	breq	.+24     	; 0x151a <DIO_activePortInPullUpResistance+0x20>
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	28 f0       	brcs	.+10     	; 0x1510 <DIO_activePortInPullUpResistance+0x16>
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	69 f0       	breq	.+26     	; 0x1524 <DIO_activePortInPullUpResistance+0x2a>
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	b9 f4       	brne	.+46     	; 0x153c <DIO_activePortInPullUpResistance+0x42>
    150e:	0f c0       	rjmp	.+30     	; 0x152e <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
    1510:	8b b3       	in	r24, 0x1b	; 27
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1516:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
    1518:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
    151a:	88 b3       	in	r24, 0x18	; 24
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1520:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
    1522:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
    1524:	85 b3       	in	r24, 0x15	; 21
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    152a:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
    152c:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
    152e:	82 b3       	in	r24, 0x12	; 18
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1534:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
    1536:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    153c:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
    153e:	08 95       	ret

00001540 <EXTI_Enable>:
static void (*PRIVATE_PtrCallBackInt1) (void) = NULL;
static void (*PRIVATE_PtrCallBackInt2) (void) = NULL;

void EXTI_Enable(EXTI_InterruptSource InterruptSource ,EXTI_TriggerEdge TriggerEdge)
{
	switch(InterruptSource)
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	71 f1       	breq	.+92     	; 0x15a0 <EXTI_Enable+0x60>
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	20 f0       	brcs	.+8      	; 0x1550 <EXTI_Enable+0x10>
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	09 f0       	breq	.+2      	; 0x154e <EXTI_Enable+0xe>
    154c:	60 c0       	rjmp	.+192    	; 0x160e <EXTI_Enable+0xce>
    154e:	50 c0       	rjmp	.+160    	; 0x15f0 <EXTI_Enable+0xb0>
	{
		case EXTI_INT0:
		switch(TriggerEdge)
    1550:	61 30       	cpi	r22, 0x01	; 1
    1552:	71 f0       	breq	.+28     	; 0x1570 <EXTI_Enable+0x30>
    1554:	61 30       	cpi	r22, 0x01	; 1
    1556:	28 f0       	brcs	.+10     	; 0x1562 <EXTI_Enable+0x22>
    1558:	62 30       	cpi	r22, 0x02	; 2
    155a:	89 f0       	breq	.+34     	; 0x157e <EXTI_Enable+0x3e>
    155c:	63 30       	cpi	r22, 0x03	; 3
    155e:	e1 f4       	brne	.+56     	; 0x1598 <EXTI_Enable+0x58>
    1560:	15 c0       	rjmp	.+42     	; 0x158c <EXTI_Enable+0x4c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1562:	85 b7       	in	r24, 0x35	; 53
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    1568:	85 b7       	in	r24, 0x35	; 53
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	85 bf       	out	0x35, r24	; 53
			break;
    156e:	14 c0       	rjmp	.+40     	; 0x1598 <EXTI_Enable+0x58>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    1570:	85 b7       	in	r24, 0x35	; 53
    1572:	8e 7f       	andi	r24, 0xFE	; 254
    1574:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    1576:	85 b7       	in	r24, 0x35	; 53
    1578:	82 60       	ori	r24, 0x02	; 2
    157a:	85 bf       	out	0x35, r24	; 53
			break;
    157c:	0d c0       	rjmp	.+26     	; 0x1598 <EXTI_Enable+0x58>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    157e:	85 b7       	in	r24, 0x35	; 53
    1580:	8e 7f       	andi	r24, 0xFE	; 254
    1582:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    1584:	85 b7       	in	r24, 0x35	; 53
    1586:	8d 7f       	andi	r24, 0xFD	; 253
    1588:	85 bf       	out	0x35, r24	; 53
			break;
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <EXTI_Enable+0x58>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
    158c:	85 b7       	in	r24, 0x35	; 53
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    1592:	85 b7       	in	r24, 0x35	; 53
    1594:	8d 7f       	andi	r24, 0xFD	; 253
    1596:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT0);
    1598:	8b b7       	in	r24, 0x3b	; 59
    159a:	80 64       	ori	r24, 0x40	; 64
    159c:	8b bf       	out	0x3b, r24	; 59
		break;
    159e:	08 95       	ret
		
		case EXTI_INT1:
		switch(TriggerEdge)
    15a0:	61 30       	cpi	r22, 0x01	; 1
    15a2:	71 f0       	breq	.+28     	; 0x15c0 <EXTI_Enable+0x80>
    15a4:	61 30       	cpi	r22, 0x01	; 1
    15a6:	28 f0       	brcs	.+10     	; 0x15b2 <EXTI_Enable+0x72>
    15a8:	62 30       	cpi	r22, 0x02	; 2
    15aa:	89 f0       	breq	.+34     	; 0x15ce <EXTI_Enable+0x8e>
    15ac:	63 30       	cpi	r22, 0x03	; 3
    15ae:	e1 f4       	brne	.+56     	; 0x15e8 <EXTI_Enable+0xa8>
    15b0:	15 c0       	rjmp	.+42     	; 0x15dc <EXTI_Enable+0x9c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    15b2:	85 b7       	in	r24, 0x35	; 53
    15b4:	84 60       	ori	r24, 0x04	; 4
    15b6:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    15b8:	85 b7       	in	r24, 0x35	; 53
    15ba:	88 60       	ori	r24, 0x08	; 8
    15bc:	85 bf       	out	0x35, r24	; 53
			break;
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <EXTI_Enable+0xa8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
    15c0:	85 b7       	in	r24, 0x35	; 53
    15c2:	8b 7f       	andi	r24, 0xFB	; 251
    15c4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    15c6:	85 b7       	in	r24, 0x35	; 53
    15c8:	88 60       	ori	r24, 0x08	; 8
    15ca:	85 bf       	out	0x35, r24	; 53
			break;
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <EXTI_Enable+0xa8>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
    15ce:	85 b7       	in	r24, 0x35	; 53
    15d0:	8b 7f       	andi	r24, 0xFB	; 251
    15d2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    15d4:	85 b7       	in	r24, 0x35	; 53
    15d6:	87 7f       	andi	r24, 0xF7	; 247
    15d8:	85 bf       	out	0x35, r24	; 53
			break;
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <EXTI_Enable+0xa8>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
    15dc:	85 b7       	in	r24, 0x35	; 53
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    15e2:	85 b7       	in	r24, 0x35	; 53
    15e4:	87 7f       	andi	r24, 0xF7	; 247
    15e6:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT1);
    15e8:	8b b7       	in	r24, 0x3b	; 59
    15ea:	80 68       	ori	r24, 0x80	; 128
    15ec:	8b bf       	out	0x3b, r24	; 59
		break;
    15ee:	08 95       	ret
		
		case EXTI_INT2:
		switch(TriggerEdge)
    15f0:	66 23       	and	r22, r22
    15f2:	19 f0       	breq	.+6      	; 0x15fa <EXTI_Enable+0xba>
    15f4:	61 30       	cpi	r22, 0x01	; 1
    15f6:	41 f4       	brne	.+16     	; 0x1608 <EXTI_Enable+0xc8>
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <EXTI_Enable+0xc2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    15fa:	84 b7       	in	r24, 0x34	; 52
    15fc:	80 64       	ori	r24, 0x40	; 64
    15fe:	84 bf       	out	0x34, r24	; 52
			break;
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <EXTI_Enable+0xc8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
    1602:	84 b7       	in	r24, 0x34	; 52
    1604:	8f 7b       	andi	r24, 0xBF	; 191
    1606:	84 bf       	out	0x34, r24	; 52
			break;
		}
		SET_BIT(GICR,INT2);
    1608:	8b b7       	in	r24, 0x3b	; 59
    160a:	80 62       	ori	r24, 0x20	; 32
    160c:	8b bf       	out	0x3b, r24	; 59
    160e:	08 95       	ret

00001610 <EXTI_Disable>:
	}
}

void EXTI_Disable(EXTI_InterruptSource InterruptSource)
{
	switch(InterruptSource)
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	49 f0       	breq	.+18     	; 0x1626 <EXTI_Disable+0x16>
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	18 f0       	brcs	.+6      	; 0x161e <EXTI_Disable+0xe>
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	61 f4       	brne	.+24     	; 0x1634 <EXTI_Disable+0x24>
    161c:	08 c0       	rjmp	.+16     	; 0x162e <EXTI_Disable+0x1e>
	{
		case EXTI_INT0:
		CLR_BIT(GICR,INT0);
    161e:	8b b7       	in	r24, 0x3b	; 59
    1620:	8f 7b       	andi	r24, 0xBF	; 191
    1622:	8b bf       	out	0x3b, r24	; 59
		break;
    1624:	08 95       	ret
		
		case EXTI_INT1:
		CLR_BIT(GICR,INT1);
    1626:	8b b7       	in	r24, 0x3b	; 59
    1628:	8f 77       	andi	r24, 0x7F	; 127
    162a:	8b bf       	out	0x3b, r24	; 59
		break;
    162c:	08 95       	ret
		
		case EXTI_INT2:
		CLR_BIT(GICR,INT2);
    162e:	8b b7       	in	r24, 0x3b	; 59
    1630:	8f 7d       	andi	r24, 0xDF	; 223
    1632:	8b bf       	out	0x3b, r24	; 59
    1634:	08 95       	ret

00001636 <EXTI_SetCallBackInt0>:
	}
	
}
void EXTI_SetCallBackInt0 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	21 f0       	breq	.+8      	; 0x1642 <EXTI_SetCallBackInt0+0xc>
	{
		PRIVATE_PtrCallBackInt0=PtrToFunc;
    163a:	90 93 fe 00 	sts	0x00FE, r25
    163e:	80 93 fd 00 	sts	0x00FD, r24
    1642:	08 95       	ret

00001644 <EXTI_SetCallBackInt1>:
	}
}
void EXTI_SetCallBackInt1 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	21 f0       	breq	.+8      	; 0x1650 <EXTI_SetCallBackInt1+0xc>
	{
		PRIVATE_PtrCallBackInt1=PtrToFunc;
    1648:	90 93 00 01 	sts	0x0100, r25
    164c:	80 93 ff 00 	sts	0x00FF, r24
    1650:	08 95       	ret

00001652 <EXTI_SetCallBackInt2>:
	}
}
void EXTI_SetCallBackInt2 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	21 f0       	breq	.+8      	; 0x165e <EXTI_SetCallBackInt2+0xc>
	{
		PRIVATE_PtrCallBackInt2=PtrToFunc;
    1656:	90 93 02 01 	sts	0x0102, r25
    165a:	80 93 01 01 	sts	0x0101, r24
    165e:	08 95       	ret

00001660 <__vector_1>:
}


void  __vector_1(void) __attribute__((signal)); 
void  __vector_1(void)
{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt0 != NULL)
    1682:	e0 91 fd 00 	lds	r30, 0x00FD
    1686:	f0 91 fe 00 	lds	r31, 0x00FE
    168a:	30 97       	sbiw	r30, 0x00	; 0
    168c:	09 f0       	breq	.+2      	; 0x1690 <__vector_1+0x30>
	{
		PRIVATE_PtrCallBackInt0();
    168e:	09 95       	icall
	}
}
    1690:	ff 91       	pop	r31
    1692:	ef 91       	pop	r30
    1694:	bf 91       	pop	r27
    1696:	af 91       	pop	r26
    1698:	9f 91       	pop	r25
    169a:	8f 91       	pop	r24
    169c:	7f 91       	pop	r23
    169e:	6f 91       	pop	r22
    16a0:	5f 91       	pop	r21
    16a2:	4f 91       	pop	r20
    16a4:	3f 91       	pop	r19
    16a6:	2f 91       	pop	r18
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <__vector_3>:



void  __vector_3(void) __attribute__((signal)); 
void  __vector_3(void)
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt2 != NULL)
    16d4:	e0 91 01 01 	lds	r30, 0x0101
    16d8:	f0 91 02 01 	lds	r31, 0x0102
    16dc:	30 97       	sbiw	r30, 0x00	; 0
    16de:	09 f0       	breq	.+2      	; 0x16e2 <__vector_3+0x30>
	{
		PRIVATE_PtrCallBackInt2();
    16e0:	09 95       	icall
	}
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <GLBI_Enable>:
#include "../include/GLBI_interfase.h"
#include "../include/GLBI_private.h"
 
 void GLBI_Enable()
 {
	 SET_BIT(SREG,I);
    1704:	8f b7       	in	r24, 0x3f	; 63
    1706:	80 68       	ori	r24, 0x80	; 128
    1708:	8f bf       	out	0x3f, r24	; 63
    170a:	08 95       	ret

0000170c <TMR0_init>:
void TMR0_init(void)
{
#if TIMER0_MODE == TIMER0_NormalMode
	
	/*Select mode = Normal Mode  */
	CLR_BIT(TCCR0,WGM00);
    170c:	83 b7       	in	r24, 0x33	; 51
    170e:	8f 7b       	andi	r24, 0xBF	; 191
    1710:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
    1712:	83 b7       	in	r24, 0x33	; 51
    1714:	87 7f       	andi	r24, 0xF7	; 247
    1716:	83 bf       	out	0x33, r24	; 51
	
	/* preload value */
	TCNT0 = TMR0_PreloadValue;
    1718:	12 be       	out	0x32, r1	; 50
	
	/*enable OVf */
	SET_BIT(TIMSK,TOIE0);
    171a:	89 b7       	in	r24, 0x39	; 57
    171c:	81 60       	ori	r24, 0x01	; 1
    171e:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
    #endif

#endif
}
    1720:	08 95       	ret

00001722 <TMR0_Start>:

void TMR0_Start(void)
{
#if TIMER0_Prescaller==TIMER0_Prescaller_1
	SET_BIT(TCCR0,CS00);
    1722:	83 b7       	in	r24, 0x33	; 51
    1724:	81 60       	ori	r24, 0x01	; 1
    1726:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    1728:	83 b7       	in	r24, 0x33	; 51
    172a:	8d 7f       	andi	r24, 0xFD	; 253
    172c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
    172e:	83 b7       	in	r24, 0x33	; 51
    1730:	8b 7f       	andi	r24, 0xFB	; 251
    1732:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);

#endif
}
    1734:	08 95       	ret

00001736 <TMR0_Stop>:

void TMR0_Stop(void)
{
	/*	Prescaller = 0	*/
	CLR_BIT(TCCR0,CS00);
    1736:	83 b7       	in	r24, 0x33	; 51
    1738:	8e 7f       	andi	r24, 0xFE	; 254
    173a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    173c:	83 b7       	in	r24, 0x33	; 51
    173e:	8d 7f       	andi	r24, 0xFD	; 253
    1740:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
    1742:	83 b7       	in	r24, 0x33	; 51
    1744:	8b 7f       	andi	r24, 0xFB	; 251
    1746:	83 bf       	out	0x33, r24	; 51
}
    1748:	08 95       	ret

0000174a <TMR0_SetDelay_ms_UsingCTC>:
// }

void TMR0_SetDelay_ms_UsingCTC(u16 Delay_ms)
{
	//	Under Condition Tick Time = 4MS   -> Prescaller 64
	OCR0 = 249 ;
    174a:	29 ef       	ldi	r18, 0xF9	; 249
    174c:	2c bf       	out	0x3c, r18	; 60
	Private_CTC_Counter=Delay_ms;
    174e:	90 93 04 01 	sts	0x0104, r25
    1752:	80 93 03 01 	sts	0x0103, r24
}
    1756:	08 95       	ret

00001758 <TMR0_SetCompareMatchValue_FastPWM_NonInverting>:

void TMR0_SetCompareMatchValue_FastPWM_NonInverting(f32 DutyCycle)
{
	#if FastPWM_Mode == FastPWM_NonInverting_Mode
	/* non inverting */
	OCR0=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW 
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	48 ec       	ldi	r20, 0xC8	; 200
    175e:	52 e4       	ldi	r21, 0x42	; 66
    1760:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divsf3>
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	53 e4       	ldi	r21, 0x43	; 67
    176c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__subsf3>
    177c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
    1780:	6c bf       	out	0x3c, r22	; 60
	#elif FastPWM_Mode == FastPWM_Inverting_Mode
	/*  inverting */
	OCR0=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW 
	#endif
}
    1782:	08 95       	ret

00001784 <TMR0_SetCallBackOverFlow>:

void TMR0_SetCallBackOverFlow (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	21 f0       	breq	.+8      	; 0x1790 <TMR0_SetCallBackOverFlow+0xc>
	{
		PRIVATE_PtrCallBackOverFlowFlag=PtrToFunc;
    1788:	90 93 06 01 	sts	0x0106, r25
    178c:	80 93 05 01 	sts	0x0105, r24
    1790:	08 95       	ret

00001792 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	21 f0       	breq	.+8      	; 0x179e <TMR0_SetCallBackCTC+0xc>
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
    1796:	90 93 08 01 	sts	0x0108, r25
    179a:	80 93 07 01 	sts	0x0107, r24
    179e:	08 95       	ret

000017a0 <__vector_10>:



void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    17a0:	1f 92       	push	r1
    17a2:	0f 92       	push	r0
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	0f 92       	push	r0
    17a8:	11 24       	eor	r1, r1
    17aa:	2f 93       	push	r18
    17ac:	3f 93       	push	r19
    17ae:	4f 93       	push	r20
    17b0:	5f 93       	push	r21
    17b2:	6f 93       	push	r22
    17b4:	7f 93       	push	r23
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	ef 93       	push	r30
    17c0:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    17c2:	80 91 09 01 	lds	r24, 0x0109
    17c6:	90 91 0a 01 	lds	r25, 0x010A
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	90 93 0a 01 	sts	0x010A, r25
    17d0:	80 93 09 01 	sts	0x0109, r24
	
	if( Private_CTC_Counter == CTC_Counter)
    17d4:	20 91 03 01 	lds	r18, 0x0103
    17d8:	30 91 04 01 	lds	r19, 0x0104
    17dc:	82 17       	cp	r24, r18
    17de:	93 07       	cpc	r25, r19
    17e0:	59 f4       	brne	.+22     	; 0x17f8 <__vector_10+0x58>
	{
		CTC_Counter = 0;
    17e2:	10 92 0a 01 	sts	0x010A, r1
    17e6:	10 92 09 01 	sts	0x0109, r1
		if (PRIVATE_PtrCallBackCTC != NULL)
    17ea:	e0 91 07 01 	lds	r30, 0x0107
    17ee:	f0 91 08 01 	lds	r31, 0x0108
    17f2:	30 97       	sbiw	r30, 0x00	; 0
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <__vector_10+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    17f6:	09 95       	icall
		}
	}
	
}
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <TMR1_init>:


void TMR1_init(void)
{
	/*Select Mode : mode 14  */
	CLR_BIT(TCCR1A,WGM10);
    181a:	8f b5       	in	r24, 0x2f	; 47
    181c:	8e 7f       	andi	r24, 0xFE	; 254
    181e:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
    1820:	8f b5       	in	r24, 0x2f	; 47
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
    1826:	8e b5       	in	r24, 0x2e	; 46
    1828:	88 60       	ori	r24, 0x08	; 8
    182a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
    182c:	8e b5       	in	r24, 0x2e	; 46
    182e:	80 61       	ori	r24, 0x10	; 16
    1830:	8e bd       	out	0x2e, r24	; 46
	
	CLR_BIT(TCCR1A,COM1A0);
    1832:	8f b5       	in	r24, 0x2f	; 47
    1834:	8f 7b       	andi	r24, 0xBF	; 191
    1836:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
    1838:	8f b5       	in	r24, 0x2f	; 47
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	8f bd       	out	0x2f, r24	; 47
	
	CLR_BIT(TCCR1A,COM1B0);
    183e:	8f b5       	in	r24, 0x2f	; 47
    1840:	8f 7e       	andi	r24, 0xEF	; 239
    1842:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1B1);
    1844:	8f b5       	in	r24, 0x2f	; 47
    1846:	80 62       	ori	r24, 0x20	; 32
    1848:	8f bd       	out	0x2f, r24	; 47
}
    184a:	08 95       	ret

0000184c <TMR1_Start>:

void TMR1_Start(void)
{
	/*select prescaler : 64*/
	
	SET_BIT(TCCR1B,CS10);
    184c:	8e b5       	in	r24, 0x2e	; 46
    184e:	81 60       	ori	r24, 0x01	; 1
    1850:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS11);
    1852:	8e b5       	in	r24, 0x2e	; 46
    1854:	82 60       	ori	r24, 0x02	; 2
    1856:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    1858:	8e b5       	in	r24, 0x2e	; 46
    185a:	8b 7f       	andi	r24, 0xFB	; 251
    185c:	8e bd       	out	0x2e, r24	; 46
}
    185e:	08 95       	ret

00001860 <TMR1_Stop>:


void TMR1_Stop(void)
{
	CLR_BIT(TCCR1B,CS10);
    1860:	8e b5       	in	r24, 0x2e	; 46
    1862:	8e 7f       	andi	r24, 0xFE	; 254
    1864:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
    1866:	8e b5       	in	r24, 0x2e	; 46
    1868:	8d 7f       	andi	r24, 0xFD	; 253
    186a:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    186c:	8e b5       	in	r24, 0x2e	; 46
    186e:	8b 7f       	andi	r24, 0xFB	; 251
    1870:	8e bd       	out	0x2e, r24	; 46
}
    1872:	08 95       	ret

00001874 <TMR1_SetDutyCycle_And_Freq_Value>:


void TMR1_SetDutyCycle_And_Freq_Value(u16 Freq ,f32 Duty)
{
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	6a 01       	movw	r12, r20
    1884:	7b 01       	movw	r14, r22
	// 	OCR1BL=Duty;
	if(Duty<=100)
    1886:	cb 01       	movw	r24, r22
    1888:	ba 01       	movw	r22, r20
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	48 ec       	ldi	r20, 0xC8	; 200
    1890:	52 e4       	ldi	r21, 0x42	; 66
    1892:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__cmpsf2>
    1896:	18 16       	cp	r1, r24
    1898:	5c f1       	brlt	.+86     	; 0x18f0 <TMR1_SetDutyCycle_And_Freq_Value+0x7c>
	{
		ICR1L =((1000000UL/Freq)/4)-1;
    189a:	9e 01       	movw	r18, r28
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	60 e9       	ldi	r22, 0x90	; 144
    18a2:	70 ed       	ldi	r23, 0xD0	; 208
    18a4:	83 e0       	ldi	r24, 0x03	; 3
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__udivmodsi4>
    18ac:	21 50       	subi	r18, 0x01	; 1
    18ae:	30 40       	sbci	r19, 0x00	; 0
    18b0:	37 bd       	out	0x27, r19	; 39
    18b2:	26 bd       	out	0x26, r18	; 38
		OCR1AL=((Duty*(ICR1L+1))/100.0)-1;
    18b4:	66 b5       	in	r22, 0x26	; 38
    18b6:	77 b5       	in	r23, 0x27	; 39
    18b8:	6f 5f       	subi	r22, 0xFF	; 255
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatunsisf>
    18c4:	a7 01       	movw	r20, r14
    18c6:	96 01       	movw	r18, r12
    18c8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	48 ec       	ldi	r20, 0xC8	; 200
    18d2:	52 e4       	ldi	r21, 0x42	; 66
    18d4:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divsf3>
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__subsf3>
    18e4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9b bd       	out	0x2b, r25	; 43
    18ee:	8a bd       	out	0x2a, r24	; 42
	}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	08 95       	ret

000018fe <TMR2_init>:
	#endif

	#elif TMR2_MODE == TMR2_PHASECORRECT_MODE
	
	/*Select mode = Phase Correct MODE */
	SET_BIT(TCCR2,WGM20);
    18fe:	85 b5       	in	r24, 0x25	; 37
    1900:	80 64       	ori	r24, 0x40	; 64
    1902:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM21); 
    1904:	85 b5       	in	r24, 0x25	; 37
    1906:	87 7f       	andi	r24, 0xF7	; 247
    1908:	85 bd       	out	0x25, r24	; 37
	/* non inverting */
	CLR_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	SET_BIT(TCCR2,COM20);
    190a:	85 b5       	in	r24, 0x25	; 37
    190c:	80 61       	ori	r24, 0x10	; 16
    190e:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,COM21);
    1910:	85 b5       	in	r24, 0x25	; 37
    1912:	80 62       	ori	r24, 0x20	; 32
    1914:	85 bd       	out	0x25, r24	; 37
	#endif

	#endif
	
}
    1916:	08 95       	ret

00001918 <TMR2_Start>:
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	CLR_BIT(TCCR2,CS22);
	
#elif TMR2_PRESCALLER == TMR2_PRESCALLER_64
	CLR_BIT(TCCR2,CS20);
    1918:	85 b5       	in	r24, 0x25	; 37
    191a:	8e 7f       	andi	r24, 0xFE	; 254
    191c:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    191e:	85 b5       	in	r24, 0x25	; 37
    1920:	8d 7f       	andi	r24, 0xFD	; 253
    1922:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    1924:	85 b5       	in	r24, 0x25	; 37
    1926:	84 60       	ori	r24, 0x04	; 4
    1928:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS22);
	
#endif	
}
    192a:	08 95       	ret

0000192c <TMR2_Stop>:

void TMR2_Stop()
{
	CLR_BIT(TCCR2,CS20);
    192c:	85 b5       	in	r24, 0x25	; 37
    192e:	8e 7f       	andi	r24, 0xFE	; 254
    1930:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    1932:	85 b5       	in	r24, 0x25	; 37
    1934:	8d 7f       	andi	r24, 0xFD	; 253
    1936:	85 bd       	out	0x25, r24	; 37
    CLR_BIT(TCCR2,CS22);
    1938:	85 b5       	in	r24, 0x25	; 37
    193a:	8b 7f       	andi	r24, 0xFB	; 251
    193c:	85 bd       	out	0x25, r24	; 37
}	
    193e:	08 95       	ret

00001940 <TMR2_SetDelay_ms_UsingCTC>:

void TMR2_SetDelay_ms_UsingCTC(u16 Delay_ms)
{
	//	Under Condition Tick Time = 4MS   -> Prescaller 64
	
	OCR2 = 249 ;
    1940:	29 ef       	ldi	r18, 0xF9	; 249
    1942:	23 bd       	out	0x23, r18	; 35
	Private_CTC_Counter=Delay_ms;
    1944:	90 93 0c 01 	sts	0x010C, r25
    1948:	80 93 0b 01 	sts	0x010B, r24
}
    194c:	08 95       	ret

0000194e <TMR2_SetDutyCycleValue_FastPWM>:
	#if TMR2_SelectFastPWM_Mode == TMR2_FastPWM_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	OCR2=(255-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	48 ec       	ldi	r20, 0xC8	; 200
    1954:	52 e4       	ldi	r21, 0x42	; 66
    1956:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divsf3>
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	53 e4       	ldi	r21, 0x43	; 67
    1962:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	8f e7       	ldi	r24, 0x7F	; 127
    1970:	93 e4       	ldi	r25, 0x43	; 67
    1972:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__subsf3>
    1976:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
    197a:	63 bd       	out	0x23, r22	; 35
	#endif
}
    197c:	08 95       	ret

0000197e <TMR2_SetDutyCycleValue_PhaseCorrect>:
	#if TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256);          //TAKE CARE OVERFLOW
	#elif TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_Inverting_Mode
	/*  inverting */
	OCR2=(256-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	48 ec       	ldi	r20, 0xC8	; 200
    1984:	52 e4       	ldi	r21, 0x42	; 66
    1986:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divsf3>
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	53 e4       	ldi	r21, 0x43	; 67
    1992:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	80 e8       	ldi	r24, 0x80	; 128
    19a0:	93 e4       	ldi	r25, 0x43	; 67
    19a2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__subsf3>
    19a6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__fixunssfsi>
    19aa:	63 bd       	out	0x23, r22	; 35
	#endif
}
    19ac:	08 95       	ret

000019ae <TMR2_SetCallBackOverFlow>:
void TMR2_SetCallBackOverFlow(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	21 f0       	breq	.+8      	; 0x19ba <TMR2_SetCallBackOverFlow+0xc>
	{
		PRIVATE_PtrCallBackOverFlowFlag=PtrToFunc;
    19b2:	90 93 0e 01 	sts	0x010E, r25
    19b6:	80 93 0d 01 	sts	0x010D, r24
    19ba:	08 95       	ret

000019bc <TMR2_SetCallBackCTC>:
	}
}

void TMR2_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	21 f0       	breq	.+8      	; 0x19c8 <TMR2_SetCallBackCTC+0xc>
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
    19c0:	90 93 10 01 	sts	0x0110, r25
    19c4:	80 93 0f 01 	sts	0x010F, r24
    19c8:	08 95       	ret

000019ca <__vector_5>:
	}
}

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
	static u16 OverFlowCounter =0;
	OverFlowCounter++;
    19ec:	80 91 11 01 	lds	r24, 0x0111
    19f0:	90 91 12 01 	lds	r25, 0x0112
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	90 93 12 01 	sts	0x0112, r25
    19fa:	80 93 11 01 	sts	0x0111, r24
	
	if( TMR2_OverFlowCounter == OverFlowCounter)
    19fe:	23 e0       	ldi	r18, 0x03	; 3
    1a00:	81 3d       	cpi	r24, 0xD1	; 209
    1a02:	92 07       	cpc	r25, r18
    1a04:	69 f4       	brne	.+26     	; 0x1a20 <__vector_5+0x56>
	{
		OverFlowCounter = 0;
    1a06:	10 92 12 01 	sts	0x0112, r1
    1a0a:	10 92 11 01 	sts	0x0111, r1
		TCNT2 = TMR2_PreloadValue;
    1a0e:	81 e7       	ldi	r24, 0x71	; 113
    1a10:	84 bd       	out	0x24, r24	; 36
		if (PRIVATE_PtrCallBackOverFlowFlag != NULL)
    1a12:	e0 91 0d 01 	lds	r30, 0x010D
    1a16:	f0 91 0e 01 	lds	r31, 0x010E
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <__vector_5+0x56>
		{
			PRIVATE_PtrCallBackOverFlowFlag();
    1a1e:	09 95       	icall
		}
	}
	
}
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    1a64:	80 91 13 01 	lds	r24, 0x0113
    1a68:	90 91 14 01 	lds	r25, 0x0114
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	90 93 14 01 	sts	0x0114, r25
    1a72:	80 93 13 01 	sts	0x0113, r24
	
	if( Private_CTC_Counter == CTC_Counter)
    1a76:	20 91 0b 01 	lds	r18, 0x010B
    1a7a:	30 91 0c 01 	lds	r19, 0x010C
    1a7e:	82 17       	cp	r24, r18
    1a80:	93 07       	cpc	r25, r19
    1a82:	59 f4       	brne	.+22     	; 0x1a9a <__vector_4+0x58>
	{
		CTC_Counter = 0;
    1a84:	10 92 14 01 	sts	0x0114, r1
    1a88:	10 92 13 01 	sts	0x0113, r1
		if (PRIVATE_PtrCallBackCTC != NULL)
    1a8c:	e0 91 0f 01 	lds	r30, 0x010F
    1a90:	f0 91 10 01 	lds	r31, 0x0110
    1a94:	30 97       	sbiw	r30, 0x00	; 0
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <__vector_4+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    1a98:	09 95       	icall
		}
	}
    1a9a:	ff 91       	pop	r31
    1a9c:	ef 91       	pop	r30
    1a9e:	bf 91       	pop	r27
    1aa0:	af 91       	pop	r26
    1aa2:	9f 91       	pop	r25
    1aa4:	8f 91       	pop	r24
    1aa6:	7f 91       	pop	r23
    1aa8:	6f 91       	pop	r22
    1aaa:	5f 91       	pop	r21
    1aac:	4f 91       	pop	r20
    1aae:	3f 91       	pop	r19
    1ab0:	2f 91       	pop	r18
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <UART_init>:

#define UART_UBBR_VALUE (((F_CPU)/(UART_SelectedBoudRate*16UL))-1)

void UART_init (void)
{
	CLR_BIT(UCSRB,UCSZ2);
    1abc:	52 98       	cbi	0x0a, 2	; 10
	CLR_BIT(UCSRC_Value,UPM0);
	CLR_BIT(UCSRC_Value,UPM1);
	CLR_BIT(UCSRC_Value,UMSEL);
	SET_BIT(UCSRC_Value,URSEL);
	
	UCSRC=UCSRC_Value;      // Set UART Mode: 8-bit data, 1 stop bit, no parity (0x86)
    1abe:	86 e8       	ldi	r24, 0x86	; 134
    1ac0:	80 bd       	out	0x20, r24	; 32
	
	UBRRL=UART_UBBR_VALUE;     // Set baud rate = 9600 -> 103;
    1ac2:	87 e6       	ldi	r24, 0x67	; 103
    1ac4:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UART_UBBR_VALUE >> 8);
    1ac6:	10 bc       	out	0x20, r1	; 32
	
	CLR_BIT(UCSRA,U2X);   // Stop double speed
    1ac8:	59 98       	cbi	0x0b, 1	; 11
	
	
	SET_BIT(UCSRB,RXCIE);  // Enable Rx Interrupt 
    1aca:	57 9a       	sbi	0x0a, 7	; 10
	SET_BIT(UCSRB,TXCIE);  // Enable Tx Interrupt 
    1acc:	56 9a       	sbi	0x0a, 6	; 10
	SET_BIT(UCSRB,UDRIE);  // Enable UDR Interrupt 
    1ace:	55 9a       	sbi	0x0a, 5	; 10
	
	SET_BIT(UCSRB,TXEN);  // Enable Tx
    1ad0:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);  // Enable Rx
    1ad2:	54 9a       	sbi	0x0a, 4	; 10
}
    1ad4:	08 95       	ret

00001ad6 <UART_ReceiveChar>:

void UART_ReceiveChar (u8* ReceiveData)
{
	if(ReceiveData!=NULL)
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	29 f0       	breq	.+10     	; 0x1ae4 <UART_ReceiveChar+0xe>
	{
		while(0 == GET_BIT(UCSRA,RXC));
    1ada:	5f 9b       	sbis	0x0b, 7	; 11
    1adc:	fe cf       	rjmp	.-4      	; 0x1ada <UART_ReceiveChar+0x4>
		*ReceiveData=UDR;
    1ade:	2c b1       	in	r18, 0x0c	; 12
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	20 83       	st	Z, r18
    1ae4:	08 95       	ret

00001ae6 <UART_TransmiteChar>:



void UART_TransmiteChar(u8 TransmiteData)
{
	UDR=TransmiteData;
    1ae6:	8c b9       	out	0x0c, r24	; 12
	while(0 == GET_BIT(UCSRA,UDRE));
    1ae8:	8b b1       	in	r24, 0x0b	; 11
    1aea:	85 ff       	sbrs	r24, 5
    1aec:	fd cf       	rjmp	.-6      	; 0x1ae8 <UART_TransmiteChar+0x2>
}
    1aee:	08 95       	ret

00001af0 <UART_TransmiteString>:

void UART_TransmiteString(u8 *TransmiteData)
{
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	8c 01       	movw	r16, r24
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1af8:	fc 01       	movw	r30, r24
    1afa:	80 81       	ld	r24, Z
    1afc:	88 23       	and	r24, r24
    1afe:	51 f0       	breq	.+20     	; 0x1b14 <UART_TransmiteString+0x24>
	while(0 == GET_BIT(UCSRA,UDRE));
}

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;
    1b00:	c0 e0       	ldi	r28, 0x00	; 0

	while (TransmiteData[Index]!='\0')		/* Send string till null */
	{
		UART_TransmiteChar(TransmiteData[Index]);
    1b02:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <UART_TransmiteChar>
		Index++;
    1b06:	cf 5f       	subi	r28, 0xFF	; 255

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1b08:	f8 01       	movw	r30, r16
    1b0a:	ec 0f       	add	r30, r28
    1b0c:	f1 1d       	adc	r31, r1
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 23       	and	r24, r24
    1b12:	b9 f7       	brne	.-18     	; 0x1b02 <UART_TransmiteString+0x12>
	{
		UART_TransmiteChar(TransmiteData[Index]);
		Index++;
	}
}
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	08 95       	ret

00001b1c <UART_CallBack_RXC>:

void UART_CallBack_RXC (void(*PtrFunction)(void))
{
	Private_UART_CallBack_RXC=PtrFunction;
    1b1c:	90 93 16 01 	sts	0x0116, r25
    1b20:	80 93 15 01 	sts	0x0115, r24
}
    1b24:	08 95       	ret

00001b26 <UART_CallBack_UDRE>:

void UART_CallBack_UDRE(void(*PtrFunction)(void))
{
	Private_UART_CallBack_UDRE=PtrFunction;
    1b26:	90 93 18 01 	sts	0x0118, r25
    1b2a:	80 93 17 01 	sts	0x0117, r24
}
    1b2e:	08 95       	ret

00001b30 <UART_CallBack_TXC>:

void UART_CallBack_TXC(void(*PtrFunction)(void))
{
	Private_UART_CallBack_TXC=PtrFunction;
    1b30:	90 93 1a 01 	sts	0x011A, r25
    1b34:	80 93 19 01 	sts	0x0119, r24
}
    1b38:	08 95       	ret

00001b3a <__vector_13>:


// Receive Complete Interrupt Request
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1b3a:	1f 92       	push	r1
    1b3c:	0f 92       	push	r0
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	0f 92       	push	r0
    1b42:	11 24       	eor	r1, r1
    1b44:	2f 93       	push	r18
    1b46:	3f 93       	push	r19
    1b48:	4f 93       	push	r20
    1b4a:	5f 93       	push	r21
    1b4c:	6f 93       	push	r22
    1b4e:	7f 93       	push	r23
    1b50:	8f 93       	push	r24
    1b52:	9f 93       	push	r25
    1b54:	af 93       	push	r26
    1b56:	bf 93       	push	r27
    1b58:	ef 93       	push	r30
    1b5a:	ff 93       	push	r31
	if (Private_UART_CallBack_RXC!=NULL)
    1b5c:	e0 91 15 01 	lds	r30, 0x0115
    1b60:	f0 91 16 01 	lds	r31, 0x0116
    1b64:	30 97       	sbiw	r30, 0x00	; 0
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <__vector_13+0x30>
	{
		Private_UART_CallBack_RXC();
    1b68:	09 95       	icall
	}
}
    1b6a:	ff 91       	pop	r31
    1b6c:	ef 91       	pop	r30
    1b6e:	bf 91       	pop	r27
    1b70:	af 91       	pop	r26
    1b72:	9f 91       	pop	r25
    1b74:	8f 91       	pop	r24
    1b76:	7f 91       	pop	r23
    1b78:	6f 91       	pop	r22
    1b7a:	5f 91       	pop	r21
    1b7c:	4f 91       	pop	r20
    1b7e:	3f 91       	pop	r19
    1b80:	2f 91       	pop	r18
    1b82:	0f 90       	pop	r0
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	0f 90       	pop	r0
    1b88:	1f 90       	pop	r1
    1b8a:	18 95       	reti

00001b8c <__vector_14>:

// Data Register Empty Interrupt Request
void __vector_14(void) __attribute__((signal));
void __vector_14()
{
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
	if (Private_UART_CallBack_UDRE!=NULL)
    1bae:	e0 91 17 01 	lds	r30, 0x0117
    1bb2:	f0 91 18 01 	lds	r31, 0x0118
    1bb6:	30 97       	sbiw	r30, 0x00	; 0
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__vector_14+0x30>
	{
		Private_UART_CallBack_UDRE();
    1bba:	09 95       	icall
	} 
}
    1bbc:	ff 91       	pop	r31
    1bbe:	ef 91       	pop	r30
    1bc0:	bf 91       	pop	r27
    1bc2:	af 91       	pop	r26
    1bc4:	9f 91       	pop	r25
    1bc6:	8f 91       	pop	r24
    1bc8:	7f 91       	pop	r23
    1bca:	6f 91       	pop	r22
    1bcc:	5f 91       	pop	r21
    1bce:	4f 91       	pop	r20
    1bd0:	3f 91       	pop	r19
    1bd2:	2f 91       	pop	r18
    1bd4:	0f 90       	pop	r0
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	0f 90       	pop	r0
    1bda:	1f 90       	pop	r1
    1bdc:	18 95       	reti

00001bde <__vector_15>:

// Transmit Complete Interrupt Request
void __vector_15(void) __attribute__((signal));
void __vector_15()
{
    1bde:	1f 92       	push	r1
    1be0:	0f 92       	push	r0
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	0f 92       	push	r0
    1be6:	11 24       	eor	r1, r1
    1be8:	2f 93       	push	r18
    1bea:	3f 93       	push	r19
    1bec:	4f 93       	push	r20
    1bee:	5f 93       	push	r21
    1bf0:	6f 93       	push	r22
    1bf2:	7f 93       	push	r23
    1bf4:	8f 93       	push	r24
    1bf6:	9f 93       	push	r25
    1bf8:	af 93       	push	r26
    1bfa:	bf 93       	push	r27
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
	if (Private_UART_CallBack_TXC!=NULL)
    1c00:	e0 91 19 01 	lds	r30, 0x0119
    1c04:	f0 91 1a 01 	lds	r31, 0x011A
    1c08:	30 97       	sbiw	r30, 0x00	; 0
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <__vector_15+0x30>
	{
		Private_UART_CallBack_TXC();
    1c0c:	09 95       	icall
	} 
    1c0e:	ff 91       	pop	r31
    1c10:	ef 91       	pop	r30
    1c12:	bf 91       	pop	r27
    1c14:	af 91       	pop	r26
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	7f 91       	pop	r23
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <__subsf3>:
    1c30:	50 58       	subi	r21, 0x80	; 128

00001c32 <__addsf3>:
    1c32:	bb 27       	eor	r27, r27
    1c34:	aa 27       	eor	r26, r26
    1c36:	0e d0       	rcall	.+28     	; 0x1c54 <__addsf3x>
    1c38:	70 c1       	rjmp	.+736    	; 0x1f1a <__fp_round>
    1c3a:	61 d1       	rcall	.+706    	; 0x1efe <__fp_pscA>
    1c3c:	30 f0       	brcs	.+12     	; 0x1c4a <__addsf3+0x18>
    1c3e:	66 d1       	rcall	.+716    	; 0x1f0c <__fp_pscB>
    1c40:	20 f0       	brcs	.+8      	; 0x1c4a <__addsf3+0x18>
    1c42:	31 f4       	brne	.+12     	; 0x1c50 <__addsf3+0x1e>
    1c44:	9f 3f       	cpi	r25, 0xFF	; 255
    1c46:	11 f4       	brne	.+4      	; 0x1c4c <__addsf3+0x1a>
    1c48:	1e f4       	brtc	.+6      	; 0x1c50 <__addsf3+0x1e>
    1c4a:	56 c1       	rjmp	.+684    	; 0x1ef8 <__fp_nan>
    1c4c:	0e f4       	brtc	.+2      	; 0x1c50 <__addsf3+0x1e>
    1c4e:	e0 95       	com	r30
    1c50:	e7 fb       	bst	r30, 7
    1c52:	4c c1       	rjmp	.+664    	; 0x1eec <__fp_inf>

00001c54 <__addsf3x>:
    1c54:	e9 2f       	mov	r30, r25
    1c56:	72 d1       	rcall	.+740    	; 0x1f3c <__fp_split3>
    1c58:	80 f3       	brcs	.-32     	; 0x1c3a <__addsf3+0x8>
    1c5a:	ba 17       	cp	r27, r26
    1c5c:	62 07       	cpc	r22, r18
    1c5e:	73 07       	cpc	r23, r19
    1c60:	84 07       	cpc	r24, r20
    1c62:	95 07       	cpc	r25, r21
    1c64:	18 f0       	brcs	.+6      	; 0x1c6c <__addsf3x+0x18>
    1c66:	71 f4       	brne	.+28     	; 0x1c84 <__addsf3x+0x30>
    1c68:	9e f5       	brtc	.+102    	; 0x1cd0 <__addsf3x+0x7c>
    1c6a:	8a c1       	rjmp	.+788    	; 0x1f80 <__fp_zero>
    1c6c:	0e f4       	brtc	.+2      	; 0x1c70 <__addsf3x+0x1c>
    1c6e:	e0 95       	com	r30
    1c70:	0b 2e       	mov	r0, r27
    1c72:	ba 2f       	mov	r27, r26
    1c74:	a0 2d       	mov	r26, r0
    1c76:	0b 01       	movw	r0, r22
    1c78:	b9 01       	movw	r22, r18
    1c7a:	90 01       	movw	r18, r0
    1c7c:	0c 01       	movw	r0, r24
    1c7e:	ca 01       	movw	r24, r20
    1c80:	a0 01       	movw	r20, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	ff 27       	eor	r31, r31
    1c86:	59 1b       	sub	r21, r25
    1c88:	99 f0       	breq	.+38     	; 0x1cb0 <__addsf3x+0x5c>
    1c8a:	59 3f       	cpi	r21, 0xF9	; 249
    1c8c:	50 f4       	brcc	.+20     	; 0x1ca2 <__addsf3x+0x4e>
    1c8e:	50 3e       	cpi	r21, 0xE0	; 224
    1c90:	68 f1       	brcs	.+90     	; 0x1cec <__addsf3x+0x98>
    1c92:	1a 16       	cp	r1, r26
    1c94:	f0 40       	sbci	r31, 0x00	; 0
    1c96:	a2 2f       	mov	r26, r18
    1c98:	23 2f       	mov	r18, r19
    1c9a:	34 2f       	mov	r19, r20
    1c9c:	44 27       	eor	r20, r20
    1c9e:	58 5f       	subi	r21, 0xF8	; 248
    1ca0:	f3 cf       	rjmp	.-26     	; 0x1c88 <__addsf3x+0x34>
    1ca2:	46 95       	lsr	r20
    1ca4:	37 95       	ror	r19
    1ca6:	27 95       	ror	r18
    1ca8:	a7 95       	ror	r26
    1caa:	f0 40       	sbci	r31, 0x00	; 0
    1cac:	53 95       	inc	r21
    1cae:	c9 f7       	brne	.-14     	; 0x1ca2 <__addsf3x+0x4e>
    1cb0:	7e f4       	brtc	.+30     	; 0x1cd0 <__addsf3x+0x7c>
    1cb2:	1f 16       	cp	r1, r31
    1cb4:	ba 0b       	sbc	r27, r26
    1cb6:	62 0b       	sbc	r22, r18
    1cb8:	73 0b       	sbc	r23, r19
    1cba:	84 0b       	sbc	r24, r20
    1cbc:	ba f0       	brmi	.+46     	; 0x1cec <__addsf3x+0x98>
    1cbe:	91 50       	subi	r25, 0x01	; 1
    1cc0:	a1 f0       	breq	.+40     	; 0x1cea <__addsf3x+0x96>
    1cc2:	ff 0f       	add	r31, r31
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	66 1f       	adc	r22, r22
    1cc8:	77 1f       	adc	r23, r23
    1cca:	88 1f       	adc	r24, r24
    1ccc:	c2 f7       	brpl	.-16     	; 0x1cbe <__addsf3x+0x6a>
    1cce:	0e c0       	rjmp	.+28     	; 0x1cec <__addsf3x+0x98>
    1cd0:	ba 0f       	add	r27, r26
    1cd2:	62 1f       	adc	r22, r18
    1cd4:	73 1f       	adc	r23, r19
    1cd6:	84 1f       	adc	r24, r20
    1cd8:	48 f4       	brcc	.+18     	; 0x1cec <__addsf3x+0x98>
    1cda:	87 95       	ror	r24
    1cdc:	77 95       	ror	r23
    1cde:	67 95       	ror	r22
    1ce0:	b7 95       	ror	r27
    1ce2:	f7 95       	ror	r31
    1ce4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <__addsf3x+0x96>
    1ce8:	b3 cf       	rjmp	.-154    	; 0x1c50 <__addsf3+0x1e>
    1cea:	93 95       	inc	r25
    1cec:	88 0f       	add	r24, r24
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <__addsf3x+0x9e>
    1cf0:	99 27       	eor	r25, r25
    1cf2:	ee 0f       	add	r30, r30
    1cf4:	97 95       	ror	r25
    1cf6:	87 95       	ror	r24
    1cf8:	08 95       	ret

00001cfa <__cmpsf2>:
    1cfa:	d4 d0       	rcall	.+424    	; 0x1ea4 <__fp_cmp>
    1cfc:	08 f4       	brcc	.+2      	; 0x1d00 <__cmpsf2+0x6>
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	08 95       	ret

00001d02 <__divsf3>:
    1d02:	0c d0       	rcall	.+24     	; 0x1d1c <__divsf3x>
    1d04:	0a c1       	rjmp	.+532    	; 0x1f1a <__fp_round>
    1d06:	02 d1       	rcall	.+516    	; 0x1f0c <__fp_pscB>
    1d08:	40 f0       	brcs	.+16     	; 0x1d1a <__divsf3+0x18>
    1d0a:	f9 d0       	rcall	.+498    	; 0x1efe <__fp_pscA>
    1d0c:	30 f0       	brcs	.+12     	; 0x1d1a <__divsf3+0x18>
    1d0e:	21 f4       	brne	.+8      	; 0x1d18 <__divsf3+0x16>
    1d10:	5f 3f       	cpi	r21, 0xFF	; 255
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <__divsf3+0x18>
    1d14:	eb c0       	rjmp	.+470    	; 0x1eec <__fp_inf>
    1d16:	51 11       	cpse	r21, r1
    1d18:	34 c1       	rjmp	.+616    	; 0x1f82 <__fp_szero>
    1d1a:	ee c0       	rjmp	.+476    	; 0x1ef8 <__fp_nan>

00001d1c <__divsf3x>:
    1d1c:	0f d1       	rcall	.+542    	; 0x1f3c <__fp_split3>
    1d1e:	98 f3       	brcs	.-26     	; 0x1d06 <__divsf3+0x4>

00001d20 <__divsf3_pse>:
    1d20:	99 23       	and	r25, r25
    1d22:	c9 f3       	breq	.-14     	; 0x1d16 <__divsf3+0x14>
    1d24:	55 23       	and	r21, r21
    1d26:	b1 f3       	breq	.-20     	; 0x1d14 <__divsf3+0x12>
    1d28:	95 1b       	sub	r25, r21
    1d2a:	55 0b       	sbc	r21, r21
    1d2c:	bb 27       	eor	r27, r27
    1d2e:	aa 27       	eor	r26, r26
    1d30:	62 17       	cp	r22, r18
    1d32:	73 07       	cpc	r23, r19
    1d34:	84 07       	cpc	r24, r20
    1d36:	38 f0       	brcs	.+14     	; 0x1d46 <__divsf3_pse+0x26>
    1d38:	9f 5f       	subi	r25, 0xFF	; 255
    1d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3c:	22 0f       	add	r18, r18
    1d3e:	33 1f       	adc	r19, r19
    1d40:	44 1f       	adc	r20, r20
    1d42:	aa 1f       	adc	r26, r26
    1d44:	a9 f3       	breq	.-22     	; 0x1d30 <__divsf3_pse+0x10>
    1d46:	33 d0       	rcall	.+102    	; 0x1dae <__divsf3_pse+0x8e>
    1d48:	0e 2e       	mov	r0, r30
    1d4a:	3a f0       	brmi	.+14     	; 0x1d5a <__divsf3_pse+0x3a>
    1d4c:	e0 e8       	ldi	r30, 0x80	; 128
    1d4e:	30 d0       	rcall	.+96     	; 0x1db0 <__divsf3_pse+0x90>
    1d50:	91 50       	subi	r25, 0x01	; 1
    1d52:	50 40       	sbci	r21, 0x00	; 0
    1d54:	e6 95       	lsr	r30
    1d56:	00 1c       	adc	r0, r0
    1d58:	ca f7       	brpl	.-14     	; 0x1d4c <__divsf3_pse+0x2c>
    1d5a:	29 d0       	rcall	.+82     	; 0x1dae <__divsf3_pse+0x8e>
    1d5c:	fe 2f       	mov	r31, r30
    1d5e:	27 d0       	rcall	.+78     	; 0x1dae <__divsf3_pse+0x8e>
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	bb 1f       	adc	r27, r27
    1d68:	26 17       	cp	r18, r22
    1d6a:	37 07       	cpc	r19, r23
    1d6c:	48 07       	cpc	r20, r24
    1d6e:	ab 07       	cpc	r26, r27
    1d70:	b0 e8       	ldi	r27, 0x80	; 128
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <__divsf3_pse+0x56>
    1d74:	bb 0b       	sbc	r27, r27
    1d76:	80 2d       	mov	r24, r0
    1d78:	bf 01       	movw	r22, r30
    1d7a:	ff 27       	eor	r31, r31
    1d7c:	93 58       	subi	r25, 0x83	; 131
    1d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d80:	2a f0       	brmi	.+10     	; 0x1d8c <__divsf3_pse+0x6c>
    1d82:	9e 3f       	cpi	r25, 0xFE	; 254
    1d84:	51 05       	cpc	r21, r1
    1d86:	68 f0       	brcs	.+26     	; 0x1da2 <__divsf3_pse+0x82>
    1d88:	b1 c0       	rjmp	.+354    	; 0x1eec <__fp_inf>
    1d8a:	fb c0       	rjmp	.+502    	; 0x1f82 <__fp_szero>
    1d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8e:	ec f3       	brlt	.-6      	; 0x1d8a <__divsf3_pse+0x6a>
    1d90:	98 3e       	cpi	r25, 0xE8	; 232
    1d92:	dc f3       	brlt	.-10     	; 0x1d8a <__divsf3_pse+0x6a>
    1d94:	86 95       	lsr	r24
    1d96:	77 95       	ror	r23
    1d98:	67 95       	ror	r22
    1d9a:	b7 95       	ror	r27
    1d9c:	f7 95       	ror	r31
    1d9e:	9f 5f       	subi	r25, 0xFF	; 255
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <__divsf3_pse+0x74>
    1da2:	88 0f       	add	r24, r24
    1da4:	91 1d       	adc	r25, r1
    1da6:	96 95       	lsr	r25
    1da8:	87 95       	ror	r24
    1daa:	97 f9       	bld	r25, 7
    1dac:	08 95       	ret
    1dae:	e1 e0       	ldi	r30, 0x01	; 1
    1db0:	66 0f       	add	r22, r22
    1db2:	77 1f       	adc	r23, r23
    1db4:	88 1f       	adc	r24, r24
    1db6:	bb 1f       	adc	r27, r27
    1db8:	62 17       	cp	r22, r18
    1dba:	73 07       	cpc	r23, r19
    1dbc:	84 07       	cpc	r24, r20
    1dbe:	ba 07       	cpc	r27, r26
    1dc0:	20 f0       	brcs	.+8      	; 0x1dca <__divsf3_pse+0xaa>
    1dc2:	62 1b       	sub	r22, r18
    1dc4:	73 0b       	sbc	r23, r19
    1dc6:	84 0b       	sbc	r24, r20
    1dc8:	ba 0b       	sbc	r27, r26
    1dca:	ee 1f       	adc	r30, r30
    1dcc:	88 f7       	brcc	.-30     	; 0x1db0 <__divsf3_pse+0x90>
    1dce:	e0 95       	com	r30
    1dd0:	08 95       	ret

00001dd2 <__fixunssfsi>:
    1dd2:	bc d0       	rcall	.+376    	; 0x1f4c <__fp_splitA>
    1dd4:	88 f0       	brcs	.+34     	; 0x1df8 <__fixunssfsi+0x26>
    1dd6:	9f 57       	subi	r25, 0x7F	; 127
    1dd8:	90 f0       	brcs	.+36     	; 0x1dfe <__fixunssfsi+0x2c>
    1dda:	b9 2f       	mov	r27, r25
    1ddc:	99 27       	eor	r25, r25
    1dde:	b7 51       	subi	r27, 0x17	; 23
    1de0:	a0 f0       	brcs	.+40     	; 0x1e0a <__fixunssfsi+0x38>
    1de2:	d1 f0       	breq	.+52     	; 0x1e18 <__fixunssfsi+0x46>
    1de4:	66 0f       	add	r22, r22
    1de6:	77 1f       	adc	r23, r23
    1de8:	88 1f       	adc	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	1a f0       	brmi	.+6      	; 0x1df4 <__fixunssfsi+0x22>
    1dee:	ba 95       	dec	r27
    1df0:	c9 f7       	brne	.-14     	; 0x1de4 <__fixunssfsi+0x12>
    1df2:	12 c0       	rjmp	.+36     	; 0x1e18 <__fixunssfsi+0x46>
    1df4:	b1 30       	cpi	r27, 0x01	; 1
    1df6:	81 f0       	breq	.+32     	; 0x1e18 <__fixunssfsi+0x46>
    1df8:	c3 d0       	rcall	.+390    	; 0x1f80 <__fp_zero>
    1dfa:	b1 e0       	ldi	r27, 0x01	; 1
    1dfc:	08 95       	ret
    1dfe:	c0 c0       	rjmp	.+384    	; 0x1f80 <__fp_zero>
    1e00:	67 2f       	mov	r22, r23
    1e02:	78 2f       	mov	r23, r24
    1e04:	88 27       	eor	r24, r24
    1e06:	b8 5f       	subi	r27, 0xF8	; 248
    1e08:	39 f0       	breq	.+14     	; 0x1e18 <__fixunssfsi+0x46>
    1e0a:	b9 3f       	cpi	r27, 0xF9	; 249
    1e0c:	cc f3       	brlt	.-14     	; 0x1e00 <__fixunssfsi+0x2e>
    1e0e:	86 95       	lsr	r24
    1e10:	77 95       	ror	r23
    1e12:	67 95       	ror	r22
    1e14:	b3 95       	inc	r27
    1e16:	d9 f7       	brne	.-10     	; 0x1e0e <__fixunssfsi+0x3c>
    1e18:	3e f4       	brtc	.+14     	; 0x1e28 <__fixunssfsi+0x56>
    1e1a:	90 95       	com	r25
    1e1c:	80 95       	com	r24
    1e1e:	70 95       	com	r23
    1e20:	61 95       	neg	r22
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	8f 4f       	sbci	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	08 95       	ret

00001e2a <__floatunsisf>:
    1e2a:	e8 94       	clt
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <__floatsisf+0x12>

00001e2e <__floatsisf>:
    1e2e:	97 fb       	bst	r25, 7
    1e30:	3e f4       	brtc	.+14     	; 0x1e40 <__floatsisf+0x12>
    1e32:	90 95       	com	r25
    1e34:	80 95       	com	r24
    1e36:	70 95       	com	r23
    1e38:	61 95       	neg	r22
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	99 23       	and	r25, r25
    1e42:	a9 f0       	breq	.+42     	; 0x1e6e <__floatsisf+0x40>
    1e44:	f9 2f       	mov	r31, r25
    1e46:	96 e9       	ldi	r25, 0x96	; 150
    1e48:	bb 27       	eor	r27, r27
    1e4a:	93 95       	inc	r25
    1e4c:	f6 95       	lsr	r31
    1e4e:	87 95       	ror	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	f1 11       	cpse	r31, r1
    1e58:	f8 cf       	rjmp	.-16     	; 0x1e4a <__floatsisf+0x1c>
    1e5a:	fa f4       	brpl	.+62     	; 0x1e9a <__floatsisf+0x6c>
    1e5c:	bb 0f       	add	r27, r27
    1e5e:	11 f4       	brne	.+4      	; 0x1e64 <__floatsisf+0x36>
    1e60:	60 ff       	sbrs	r22, 0
    1e62:	1b c0       	rjmp	.+54     	; 0x1e9a <__floatsisf+0x6c>
    1e64:	6f 5f       	subi	r22, 0xFF	; 255
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	16 c0       	rjmp	.+44     	; 0x1e9a <__floatsisf+0x6c>
    1e6e:	88 23       	and	r24, r24
    1e70:	11 f0       	breq	.+4      	; 0x1e76 <__floatsisf+0x48>
    1e72:	96 e9       	ldi	r25, 0x96	; 150
    1e74:	11 c0       	rjmp	.+34     	; 0x1e98 <__floatsisf+0x6a>
    1e76:	77 23       	and	r23, r23
    1e78:	21 f0       	breq	.+8      	; 0x1e82 <__floatsisf+0x54>
    1e7a:	9e e8       	ldi	r25, 0x8E	; 142
    1e7c:	87 2f       	mov	r24, r23
    1e7e:	76 2f       	mov	r23, r22
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <__floatsisf+0x5e>
    1e82:	66 23       	and	r22, r22
    1e84:	71 f0       	breq	.+28     	; 0x1ea2 <__floatsisf+0x74>
    1e86:	96 e8       	ldi	r25, 0x86	; 134
    1e88:	86 2f       	mov	r24, r22
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	2a f0       	brmi	.+10     	; 0x1e9a <__floatsisf+0x6c>
    1e90:	9a 95       	dec	r25
    1e92:	66 0f       	add	r22, r22
    1e94:	77 1f       	adc	r23, r23
    1e96:	88 1f       	adc	r24, r24
    1e98:	da f7       	brpl	.-10     	; 0x1e90 <__floatsisf+0x62>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	96 95       	lsr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	97 f9       	bld	r25, 7
    1ea2:	08 95       	ret

00001ea4 <__fp_cmp>:
    1ea4:	99 0f       	add	r25, r25
    1ea6:	00 08       	sbc	r0, r0
    1ea8:	55 0f       	add	r21, r21
    1eaa:	aa 0b       	sbc	r26, r26
    1eac:	e0 e8       	ldi	r30, 0x80	; 128
    1eae:	fe ef       	ldi	r31, 0xFE	; 254
    1eb0:	16 16       	cp	r1, r22
    1eb2:	17 06       	cpc	r1, r23
    1eb4:	e8 07       	cpc	r30, r24
    1eb6:	f9 07       	cpc	r31, r25
    1eb8:	c0 f0       	brcs	.+48     	; 0x1eea <__fp_cmp+0x46>
    1eba:	12 16       	cp	r1, r18
    1ebc:	13 06       	cpc	r1, r19
    1ebe:	e4 07       	cpc	r30, r20
    1ec0:	f5 07       	cpc	r31, r21
    1ec2:	98 f0       	brcs	.+38     	; 0x1eea <__fp_cmp+0x46>
    1ec4:	62 1b       	sub	r22, r18
    1ec6:	73 0b       	sbc	r23, r19
    1ec8:	84 0b       	sbc	r24, r20
    1eca:	95 0b       	sbc	r25, r21
    1ecc:	39 f4       	brne	.+14     	; 0x1edc <__fp_cmp+0x38>
    1ece:	0a 26       	eor	r0, r26
    1ed0:	61 f0       	breq	.+24     	; 0x1eea <__fp_cmp+0x46>
    1ed2:	23 2b       	or	r18, r19
    1ed4:	24 2b       	or	r18, r20
    1ed6:	25 2b       	or	r18, r21
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <__fp_cmp+0x3e>
    1eda:	08 95       	ret
    1edc:	0a 26       	eor	r0, r26
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <__fp_cmp+0x3e>
    1ee0:	a1 40       	sbci	r26, 0x01	; 1
    1ee2:	a6 95       	lsr	r26
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	81 1d       	adc	r24, r1
    1ee8:	81 1d       	adc	r24, r1
    1eea:	08 95       	ret

00001eec <__fp_inf>:
    1eec:	97 f9       	bld	r25, 7
    1eee:	9f 67       	ori	r25, 0x7F	; 127
    1ef0:	80 e8       	ldi	r24, 0x80	; 128
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	08 95       	ret

00001ef8 <__fp_nan>:
    1ef8:	9f ef       	ldi	r25, 0xFF	; 255
    1efa:	80 ec       	ldi	r24, 0xC0	; 192
    1efc:	08 95       	ret

00001efe <__fp_pscA>:
    1efe:	00 24       	eor	r0, r0
    1f00:	0a 94       	dec	r0
    1f02:	16 16       	cp	r1, r22
    1f04:	17 06       	cpc	r1, r23
    1f06:	18 06       	cpc	r1, r24
    1f08:	09 06       	cpc	r0, r25
    1f0a:	08 95       	ret

00001f0c <__fp_pscB>:
    1f0c:	00 24       	eor	r0, r0
    1f0e:	0a 94       	dec	r0
    1f10:	12 16       	cp	r1, r18
    1f12:	13 06       	cpc	r1, r19
    1f14:	14 06       	cpc	r1, r20
    1f16:	05 06       	cpc	r0, r21
    1f18:	08 95       	ret

00001f1a <__fp_round>:
    1f1a:	09 2e       	mov	r0, r25
    1f1c:	03 94       	inc	r0
    1f1e:	00 0c       	add	r0, r0
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <__fp_round+0xc>
    1f22:	88 23       	and	r24, r24
    1f24:	52 f0       	brmi	.+20     	; 0x1f3a <__fp_round+0x20>
    1f26:	bb 0f       	add	r27, r27
    1f28:	40 f4       	brcc	.+16     	; 0x1f3a <__fp_round+0x20>
    1f2a:	bf 2b       	or	r27, r31
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <__fp_round+0x18>
    1f2e:	60 ff       	sbrs	r22, 0
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <__fp_round+0x20>
    1f32:	6f 5f       	subi	r22, 0xFF	; 255
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	8f 4f       	sbci	r24, 0xFF	; 255
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	08 95       	ret

00001f3c <__fp_split3>:
    1f3c:	57 fd       	sbrc	r21, 7
    1f3e:	90 58       	subi	r25, 0x80	; 128
    1f40:	44 0f       	add	r20, r20
    1f42:	55 1f       	adc	r21, r21
    1f44:	59 f0       	breq	.+22     	; 0x1f5c <__fp_splitA+0x10>
    1f46:	5f 3f       	cpi	r21, 0xFF	; 255
    1f48:	71 f0       	breq	.+28     	; 0x1f66 <__fp_splitA+0x1a>
    1f4a:	47 95       	ror	r20

00001f4c <__fp_splitA>:
    1f4c:	88 0f       	add	r24, r24
    1f4e:	97 fb       	bst	r25, 7
    1f50:	99 1f       	adc	r25, r25
    1f52:	61 f0       	breq	.+24     	; 0x1f6c <__fp_splitA+0x20>
    1f54:	9f 3f       	cpi	r25, 0xFF	; 255
    1f56:	79 f0       	breq	.+30     	; 0x1f76 <__fp_splitA+0x2a>
    1f58:	87 95       	ror	r24
    1f5a:	08 95       	ret
    1f5c:	12 16       	cp	r1, r18
    1f5e:	13 06       	cpc	r1, r19
    1f60:	14 06       	cpc	r1, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	f2 cf       	rjmp	.-28     	; 0x1f4a <__fp_split3+0xe>
    1f66:	46 95       	lsr	r20
    1f68:	f1 df       	rcall	.-30     	; 0x1f4c <__fp_splitA>
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <__fp_splitA+0x30>
    1f6c:	16 16       	cp	r1, r22
    1f6e:	17 06       	cpc	r1, r23
    1f70:	18 06       	cpc	r1, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	f1 cf       	rjmp	.-30     	; 0x1f58 <__fp_splitA+0xc>
    1f76:	86 95       	lsr	r24
    1f78:	71 05       	cpc	r23, r1
    1f7a:	61 05       	cpc	r22, r1
    1f7c:	08 94       	sec
    1f7e:	08 95       	ret

00001f80 <__fp_zero>:
    1f80:	e8 94       	clt

00001f82 <__fp_szero>:
    1f82:	bb 27       	eor	r27, r27
    1f84:	66 27       	eor	r22, r22
    1f86:	77 27       	eor	r23, r23
    1f88:	cb 01       	movw	r24, r22
    1f8a:	97 f9       	bld	r25, 7
    1f8c:	08 95       	ret

00001f8e <__gesf2>:
    1f8e:	8a df       	rcall	.-236    	; 0x1ea4 <__fp_cmp>
    1f90:	08 f4       	brcc	.+2      	; 0x1f94 <__gesf2+0x6>
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	08 95       	ret

00001f96 <__mulsf3>:
    1f96:	0b d0       	rcall	.+22     	; 0x1fae <__mulsf3x>
    1f98:	c0 cf       	rjmp	.-128    	; 0x1f1a <__fp_round>
    1f9a:	b1 df       	rcall	.-158    	; 0x1efe <__fp_pscA>
    1f9c:	28 f0       	brcs	.+10     	; 0x1fa8 <__mulsf3+0x12>
    1f9e:	b6 df       	rcall	.-148    	; 0x1f0c <__fp_pscB>
    1fa0:	18 f0       	brcs	.+6      	; 0x1fa8 <__mulsf3+0x12>
    1fa2:	95 23       	and	r25, r21
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <__mulsf3+0x12>
    1fa6:	a2 cf       	rjmp	.-188    	; 0x1eec <__fp_inf>
    1fa8:	a7 cf       	rjmp	.-178    	; 0x1ef8 <__fp_nan>
    1faa:	11 24       	eor	r1, r1
    1fac:	ea cf       	rjmp	.-44     	; 0x1f82 <__fp_szero>

00001fae <__mulsf3x>:
    1fae:	c6 df       	rcall	.-116    	; 0x1f3c <__fp_split3>
    1fb0:	a0 f3       	brcs	.-24     	; 0x1f9a <__mulsf3+0x4>

00001fb2 <__mulsf3_pse>:
    1fb2:	95 9f       	mul	r25, r21
    1fb4:	d1 f3       	breq	.-12     	; 0x1faa <__mulsf3+0x14>
    1fb6:	95 0f       	add	r25, r21
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	55 1f       	adc	r21, r21
    1fbc:	62 9f       	mul	r22, r18
    1fbe:	f0 01       	movw	r30, r0
    1fc0:	72 9f       	mul	r23, r18
    1fc2:	bb 27       	eor	r27, r27
    1fc4:	f0 0d       	add	r31, r0
    1fc6:	b1 1d       	adc	r27, r1
    1fc8:	63 9f       	mul	r22, r19
    1fca:	aa 27       	eor	r26, r26
    1fcc:	f0 0d       	add	r31, r0
    1fce:	b1 1d       	adc	r27, r1
    1fd0:	aa 1f       	adc	r26, r26
    1fd2:	64 9f       	mul	r22, r20
    1fd4:	66 27       	eor	r22, r22
    1fd6:	b0 0d       	add	r27, r0
    1fd8:	a1 1d       	adc	r26, r1
    1fda:	66 1f       	adc	r22, r22
    1fdc:	82 9f       	mul	r24, r18
    1fde:	22 27       	eor	r18, r18
    1fe0:	b0 0d       	add	r27, r0
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	62 1f       	adc	r22, r18
    1fe6:	73 9f       	mul	r23, r19
    1fe8:	b0 0d       	add	r27, r0
    1fea:	a1 1d       	adc	r26, r1
    1fec:	62 1f       	adc	r22, r18
    1fee:	83 9f       	mul	r24, r19
    1ff0:	a0 0d       	add	r26, r0
    1ff2:	61 1d       	adc	r22, r1
    1ff4:	22 1f       	adc	r18, r18
    1ff6:	74 9f       	mul	r23, r20
    1ff8:	33 27       	eor	r19, r19
    1ffa:	a0 0d       	add	r26, r0
    1ffc:	61 1d       	adc	r22, r1
    1ffe:	23 1f       	adc	r18, r19
    2000:	84 9f       	mul	r24, r20
    2002:	60 0d       	add	r22, r0
    2004:	21 1d       	adc	r18, r1
    2006:	82 2f       	mov	r24, r18
    2008:	76 2f       	mov	r23, r22
    200a:	6a 2f       	mov	r22, r26
    200c:	11 24       	eor	r1, r1
    200e:	9f 57       	subi	r25, 0x7F	; 127
    2010:	50 40       	sbci	r21, 0x00	; 0
    2012:	8a f0       	brmi	.+34     	; 0x2036 <__mulsf3_pse+0x84>
    2014:	e1 f0       	breq	.+56     	; 0x204e <__mulsf3_pse+0x9c>
    2016:	88 23       	and	r24, r24
    2018:	4a f0       	brmi	.+18     	; 0x202c <__mulsf3_pse+0x7a>
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	bb 1f       	adc	r27, r27
    2020:	66 1f       	adc	r22, r22
    2022:	77 1f       	adc	r23, r23
    2024:	88 1f       	adc	r24, r24
    2026:	91 50       	subi	r25, 0x01	; 1
    2028:	50 40       	sbci	r21, 0x00	; 0
    202a:	a9 f7       	brne	.-22     	; 0x2016 <__mulsf3_pse+0x64>
    202c:	9e 3f       	cpi	r25, 0xFE	; 254
    202e:	51 05       	cpc	r21, r1
    2030:	70 f0       	brcs	.+28     	; 0x204e <__mulsf3_pse+0x9c>
    2032:	5c cf       	rjmp	.-328    	; 0x1eec <__fp_inf>
    2034:	a6 cf       	rjmp	.-180    	; 0x1f82 <__fp_szero>
    2036:	5f 3f       	cpi	r21, 0xFF	; 255
    2038:	ec f3       	brlt	.-6      	; 0x2034 <__mulsf3_pse+0x82>
    203a:	98 3e       	cpi	r25, 0xE8	; 232
    203c:	dc f3       	brlt	.-10     	; 0x2034 <__mulsf3_pse+0x82>
    203e:	86 95       	lsr	r24
    2040:	77 95       	ror	r23
    2042:	67 95       	ror	r22
    2044:	b7 95       	ror	r27
    2046:	f7 95       	ror	r31
    2048:	e7 95       	ror	r30
    204a:	9f 5f       	subi	r25, 0xFF	; 255
    204c:	c1 f7       	brne	.-16     	; 0x203e <__mulsf3_pse+0x8c>
    204e:	fe 2b       	or	r31, r30
    2050:	88 0f       	add	r24, r24
    2052:	91 1d       	adc	r25, r1
    2054:	96 95       	lsr	r25
    2056:	87 95       	ror	r24
    2058:	97 f9       	bld	r25, 7
    205a:	08 95       	ret

0000205c <__mulsi3>:
    205c:	62 9f       	mul	r22, r18
    205e:	d0 01       	movw	r26, r0
    2060:	73 9f       	mul	r23, r19
    2062:	f0 01       	movw	r30, r0
    2064:	82 9f       	mul	r24, r18
    2066:	e0 0d       	add	r30, r0
    2068:	f1 1d       	adc	r31, r1
    206a:	64 9f       	mul	r22, r20
    206c:	e0 0d       	add	r30, r0
    206e:	f1 1d       	adc	r31, r1
    2070:	92 9f       	mul	r25, r18
    2072:	f0 0d       	add	r31, r0
    2074:	83 9f       	mul	r24, r19
    2076:	f0 0d       	add	r31, r0
    2078:	74 9f       	mul	r23, r20
    207a:	f0 0d       	add	r31, r0
    207c:	65 9f       	mul	r22, r21
    207e:	f0 0d       	add	r31, r0
    2080:	99 27       	eor	r25, r25
    2082:	72 9f       	mul	r23, r18
    2084:	b0 0d       	add	r27, r0
    2086:	e1 1d       	adc	r30, r1
    2088:	f9 1f       	adc	r31, r25
    208a:	63 9f       	mul	r22, r19
    208c:	b0 0d       	add	r27, r0
    208e:	e1 1d       	adc	r30, r1
    2090:	f9 1f       	adc	r31, r25
    2092:	bd 01       	movw	r22, r26
    2094:	cf 01       	movw	r24, r30
    2096:	11 24       	eor	r1, r1
    2098:	08 95       	ret

0000209a <__divmodhi4>:
    209a:	97 fb       	bst	r25, 7
    209c:	09 2e       	mov	r0, r25
    209e:	07 26       	eor	r0, r23
    20a0:	0a d0       	rcall	.+20     	; 0x20b6 <__divmodhi4_neg1>
    20a2:	77 fd       	sbrc	r23, 7
    20a4:	04 d0       	rcall	.+8      	; 0x20ae <__divmodhi4_neg2>
    20a6:	2e d0       	rcall	.+92     	; 0x2104 <__udivmodhi4>
    20a8:	06 d0       	rcall	.+12     	; 0x20b6 <__divmodhi4_neg1>
    20aa:	00 20       	and	r0, r0
    20ac:	1a f4       	brpl	.+6      	; 0x20b4 <__divmodhi4_exit>

000020ae <__divmodhi4_neg2>:
    20ae:	70 95       	com	r23
    20b0:	61 95       	neg	r22
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255

000020b4 <__divmodhi4_exit>:
    20b4:	08 95       	ret

000020b6 <__divmodhi4_neg1>:
    20b6:	f6 f7       	brtc	.-4      	; 0x20b4 <__divmodhi4_exit>
    20b8:	90 95       	com	r25
    20ba:	81 95       	neg	r24
    20bc:	9f 4f       	sbci	r25, 0xFF	; 255
    20be:	08 95       	ret

000020c0 <__udivmodsi4>:
    20c0:	a1 e2       	ldi	r26, 0x21	; 33
    20c2:	1a 2e       	mov	r1, r26
    20c4:	aa 1b       	sub	r26, r26
    20c6:	bb 1b       	sub	r27, r27
    20c8:	fd 01       	movw	r30, r26
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <__udivmodsi4_ep>

000020cc <__udivmodsi4_loop>:
    20cc:	aa 1f       	adc	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	ee 1f       	adc	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	a2 17       	cp	r26, r18
    20d6:	b3 07       	cpc	r27, r19
    20d8:	e4 07       	cpc	r30, r20
    20da:	f5 07       	cpc	r31, r21
    20dc:	20 f0       	brcs	.+8      	; 0x20e6 <__udivmodsi4_ep>
    20de:	a2 1b       	sub	r26, r18
    20e0:	b3 0b       	sbc	r27, r19
    20e2:	e4 0b       	sbc	r30, r20
    20e4:	f5 0b       	sbc	r31, r21

000020e6 <__udivmodsi4_ep>:
    20e6:	66 1f       	adc	r22, r22
    20e8:	77 1f       	adc	r23, r23
    20ea:	88 1f       	adc	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	1a 94       	dec	r1
    20f0:	69 f7       	brne	.-38     	; 0x20cc <__udivmodsi4_loop>
    20f2:	60 95       	com	r22
    20f4:	70 95       	com	r23
    20f6:	80 95       	com	r24
    20f8:	90 95       	com	r25
    20fa:	9b 01       	movw	r18, r22
    20fc:	ac 01       	movw	r20, r24
    20fe:	bd 01       	movw	r22, r26
    2100:	cf 01       	movw	r24, r30
    2102:	08 95       	ret

00002104 <__udivmodhi4>:
    2104:	aa 1b       	sub	r26, r26
    2106:	bb 1b       	sub	r27, r27
    2108:	51 e1       	ldi	r21, 0x11	; 17
    210a:	07 c0       	rjmp	.+14     	; 0x211a <__udivmodhi4_ep>

0000210c <__udivmodhi4_loop>:
    210c:	aa 1f       	adc	r26, r26
    210e:	bb 1f       	adc	r27, r27
    2110:	a6 17       	cp	r26, r22
    2112:	b7 07       	cpc	r27, r23
    2114:	10 f0       	brcs	.+4      	; 0x211a <__udivmodhi4_ep>
    2116:	a6 1b       	sub	r26, r22
    2118:	b7 0b       	sbc	r27, r23

0000211a <__udivmodhi4_ep>:
    211a:	88 1f       	adc	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	5a 95       	dec	r21
    2120:	a9 f7       	brne	.-22     	; 0x210c <__udivmodhi4_loop>
    2122:	80 95       	com	r24
    2124:	90 95       	com	r25
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	08 95       	ret

0000212c <snprintf>:
    212c:	ae e0       	ldi	r26, 0x0E	; 14
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ec e9       	ldi	r30, 0x9C	; 156
    2132:	f0 e1       	ldi	r31, 0x10	; 16
    2134:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x1c>
    2138:	0d 89       	ldd	r16, Y+21	; 0x15
    213a:	1e 89       	ldd	r17, Y+22	; 0x16
    213c:	8f 89       	ldd	r24, Y+23	; 0x17
    213e:	98 8d       	ldd	r25, Y+24	; 0x18
    2140:	26 e0       	ldi	r18, 0x06	; 6
    2142:	2c 83       	std	Y+4, r18	; 0x04
    2144:	1a 83       	std	Y+2, r17	; 0x02
    2146:	09 83       	std	Y+1, r16	; 0x01
    2148:	97 ff       	sbrs	r25, 7
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <snprintf+0x24>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e8       	ldi	r25, 0x80	; 128
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	ae 01       	movw	r20, r28
    2158:	45 5e       	subi	r20, 0xE5	; 229
    215a:	5f 4f       	sbci	r21, 0xFF	; 255
    215c:	ce 01       	movw	r24, r28
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	69 8d       	ldd	r22, Y+25	; 0x19
    2162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2164:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vfprintf>
    2168:	4d 81       	ldd	r20, Y+5	; 0x05
    216a:	5e 81       	ldd	r21, Y+6	; 0x06
    216c:	57 fd       	sbrc	r21, 7
    216e:	0a c0       	rjmp	.+20     	; 0x2184 <snprintf+0x58>
    2170:	2f 81       	ldd	r18, Y+7	; 0x07
    2172:	38 85       	ldd	r19, Y+8	; 0x08
    2174:	42 17       	cp	r20, r18
    2176:	53 07       	cpc	r21, r19
    2178:	0c f4       	brge	.+2      	; 0x217c <snprintf+0x50>
    217a:	9a 01       	movw	r18, r20
    217c:	02 0f       	add	r16, r18
    217e:	13 1f       	adc	r17, r19
    2180:	f8 01       	movw	r30, r16
    2182:	10 82       	st	Z, r1
    2184:	2e 96       	adiw	r28, 0x0e	; 14
    2186:	e4 e0       	ldi	r30, 0x04	; 4
    2188:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x1c>

0000218c <sprintf>:
    218c:	ae e0       	ldi	r26, 0x0E	; 14
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	ec ec       	ldi	r30, 0xCC	; 204
    2192:	f0 e1       	ldi	r31, 0x10	; 16
    2194:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x1c>
    2198:	0d 89       	ldd	r16, Y+21	; 0x15
    219a:	1e 89       	ldd	r17, Y+22	; 0x16
    219c:	86 e0       	ldi	r24, 0x06	; 6
    219e:	8c 83       	std	Y+4, r24	; 0x04
    21a0:	1a 83       	std	Y+2, r17	; 0x02
    21a2:	09 83       	std	Y+1, r16	; 0x01
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	9f e7       	ldi	r25, 0x7F	; 127
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	ae 01       	movw	r20, r28
    21ae:	47 5e       	subi	r20, 0xE7	; 231
    21b0:	5f 4f       	sbci	r21, 0xFF	; 255
    21b2:	ce 01       	movw	r24, r28
    21b4:	01 96       	adiw	r24, 0x01	; 1
    21b6:	6f 89       	ldd	r22, Y+23	; 0x17
    21b8:	78 8d       	ldd	r23, Y+24	; 0x18
    21ba:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vfprintf>
    21be:	ef 81       	ldd	r30, Y+7	; 0x07
    21c0:	f8 85       	ldd	r31, Y+8	; 0x08
    21c2:	e0 0f       	add	r30, r16
    21c4:	f1 1f       	adc	r31, r17
    21c6:	10 82       	st	Z, r1
    21c8:	2e 96       	adiw	r28, 0x0e	; 14
    21ca:	e4 e0       	ldi	r30, 0x04	; 4
    21cc:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x1c>

000021d0 <vfprintf>:
    21d0:	ad e0       	ldi	r26, 0x0D	; 13
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	ee ee       	ldi	r30, 0xEE	; 238
    21d6:	f0 e1       	ldi	r31, 0x10	; 16
    21d8:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__>
    21dc:	3c 01       	movw	r6, r24
    21de:	7d 87       	std	Y+13, r23	; 0x0d
    21e0:	6c 87       	std	Y+12, r22	; 0x0c
    21e2:	5a 01       	movw	r10, r20
    21e4:	fc 01       	movw	r30, r24
    21e6:	17 82       	std	Z+7, r1	; 0x07
    21e8:	16 82       	std	Z+6, r1	; 0x06
    21ea:	83 81       	ldd	r24, Z+3	; 0x03
    21ec:	81 ff       	sbrs	r24, 1
    21ee:	c8 c1       	rjmp	.+912    	; 0x2580 <vfprintf+0x3b0>
    21f0:	2e 01       	movw	r4, r28
    21f2:	08 94       	sec
    21f4:	41 1c       	adc	r4, r1
    21f6:	51 1c       	adc	r5, r1
    21f8:	f3 01       	movw	r30, r6
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    21fe:	fd 85       	ldd	r31, Y+13	; 0x0d
    2200:	93 fd       	sbrc	r25, 3
    2202:	85 91       	lpm	r24, Z+
    2204:	93 ff       	sbrs	r25, 3
    2206:	81 91       	ld	r24, Z+
    2208:	fd 87       	std	Y+13, r31	; 0x0d
    220a:	ec 87       	std	Y+12, r30	; 0x0c
    220c:	88 23       	and	r24, r24
    220e:	09 f4       	brne	.+2      	; 0x2212 <vfprintf+0x42>
    2210:	b3 c1       	rjmp	.+870    	; 0x2578 <vfprintf+0x3a8>
    2212:	85 32       	cpi	r24, 0x25	; 37
    2214:	41 f4       	brne	.+16     	; 0x2226 <vfprintf+0x56>
    2216:	93 fd       	sbrc	r25, 3
    2218:	85 91       	lpm	r24, Z+
    221a:	93 ff       	sbrs	r25, 3
    221c:	81 91       	ld	r24, Z+
    221e:	fd 87       	std	Y+13, r31	; 0x0d
    2220:	ec 87       	std	Y+12, r30	; 0x0c
    2222:	85 32       	cpi	r24, 0x25	; 37
    2224:	29 f4       	brne	.+10     	; 0x2230 <vfprintf+0x60>
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	b3 01       	movw	r22, r6
    222a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    222e:	e4 cf       	rjmp	.-56     	; 0x21f8 <vfprintf+0x28>
    2230:	ff 24       	eor	r15, r15
    2232:	ee 24       	eor	r14, r14
    2234:	10 e0       	ldi	r17, 0x00	; 0
    2236:	10 32       	cpi	r17, 0x20	; 32
    2238:	b0 f4       	brcc	.+44     	; 0x2266 <vfprintf+0x96>
    223a:	8b 32       	cpi	r24, 0x2B	; 43
    223c:	69 f0       	breq	.+26     	; 0x2258 <vfprintf+0x88>
    223e:	8c 32       	cpi	r24, 0x2C	; 44
    2240:	28 f4       	brcc	.+10     	; 0x224c <vfprintf+0x7c>
    2242:	80 32       	cpi	r24, 0x20	; 32
    2244:	51 f0       	breq	.+20     	; 0x225a <vfprintf+0x8a>
    2246:	83 32       	cpi	r24, 0x23	; 35
    2248:	71 f4       	brne	.+28     	; 0x2266 <vfprintf+0x96>
    224a:	0b c0       	rjmp	.+22     	; 0x2262 <vfprintf+0x92>
    224c:	8d 32       	cpi	r24, 0x2D	; 45
    224e:	39 f0       	breq	.+14     	; 0x225e <vfprintf+0x8e>
    2250:	80 33       	cpi	r24, 0x30	; 48
    2252:	49 f4       	brne	.+18     	; 0x2266 <vfprintf+0x96>
    2254:	11 60       	ori	r17, 0x01	; 1
    2256:	2c c0       	rjmp	.+88     	; 0x22b0 <vfprintf+0xe0>
    2258:	12 60       	ori	r17, 0x02	; 2
    225a:	14 60       	ori	r17, 0x04	; 4
    225c:	29 c0       	rjmp	.+82     	; 0x22b0 <vfprintf+0xe0>
    225e:	18 60       	ori	r17, 0x08	; 8
    2260:	27 c0       	rjmp	.+78     	; 0x22b0 <vfprintf+0xe0>
    2262:	10 61       	ori	r17, 0x10	; 16
    2264:	25 c0       	rjmp	.+74     	; 0x22b0 <vfprintf+0xe0>
    2266:	17 fd       	sbrc	r17, 7
    2268:	2e c0       	rjmp	.+92     	; 0x22c6 <vfprintf+0xf6>
    226a:	28 2f       	mov	r18, r24
    226c:	20 53       	subi	r18, 0x30	; 48
    226e:	2a 30       	cpi	r18, 0x0A	; 10
    2270:	98 f4       	brcc	.+38     	; 0x2298 <vfprintf+0xc8>
    2272:	16 ff       	sbrs	r17, 6
    2274:	08 c0       	rjmp	.+16     	; 0x2286 <vfprintf+0xb6>
    2276:	8f 2d       	mov	r24, r15
    2278:	88 0f       	add	r24, r24
    227a:	f8 2e       	mov	r15, r24
    227c:	ff 0c       	add	r15, r15
    227e:	ff 0c       	add	r15, r15
    2280:	f8 0e       	add	r15, r24
    2282:	f2 0e       	add	r15, r18
    2284:	15 c0       	rjmp	.+42     	; 0x22b0 <vfprintf+0xe0>
    2286:	8e 2d       	mov	r24, r14
    2288:	88 0f       	add	r24, r24
    228a:	e8 2e       	mov	r14, r24
    228c:	ee 0c       	add	r14, r14
    228e:	ee 0c       	add	r14, r14
    2290:	e8 0e       	add	r14, r24
    2292:	e2 0e       	add	r14, r18
    2294:	10 62       	ori	r17, 0x20	; 32
    2296:	0c c0       	rjmp	.+24     	; 0x22b0 <vfprintf+0xe0>
    2298:	8e 32       	cpi	r24, 0x2E	; 46
    229a:	21 f4       	brne	.+8      	; 0x22a4 <vfprintf+0xd4>
    229c:	16 fd       	sbrc	r17, 6
    229e:	6c c1       	rjmp	.+728    	; 0x2578 <vfprintf+0x3a8>
    22a0:	10 64       	ori	r17, 0x40	; 64
    22a2:	06 c0       	rjmp	.+12     	; 0x22b0 <vfprintf+0xe0>
    22a4:	8c 36       	cpi	r24, 0x6C	; 108
    22a6:	11 f4       	brne	.+4      	; 0x22ac <vfprintf+0xdc>
    22a8:	10 68       	ori	r17, 0x80	; 128
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <vfprintf+0xe0>
    22ac:	88 36       	cpi	r24, 0x68	; 104
    22ae:	59 f4       	brne	.+22     	; 0x22c6 <vfprintf+0xf6>
    22b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    22b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    22b4:	93 fd       	sbrc	r25, 3
    22b6:	85 91       	lpm	r24, Z+
    22b8:	93 ff       	sbrs	r25, 3
    22ba:	81 91       	ld	r24, Z+
    22bc:	fd 87       	std	Y+13, r31	; 0x0d
    22be:	ec 87       	std	Y+12, r30	; 0x0c
    22c0:	88 23       	and	r24, r24
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <vfprintf+0xf6>
    22c4:	b8 cf       	rjmp	.-144    	; 0x2236 <vfprintf+0x66>
    22c6:	98 2f       	mov	r25, r24
    22c8:	95 54       	subi	r25, 0x45	; 69
    22ca:	93 30       	cpi	r25, 0x03	; 3
    22cc:	18 f0       	brcs	.+6      	; 0x22d4 <vfprintf+0x104>
    22ce:	90 52       	subi	r25, 0x20	; 32
    22d0:	93 30       	cpi	r25, 0x03	; 3
    22d2:	38 f4       	brcc	.+14     	; 0x22e2 <vfprintf+0x112>
    22d4:	24 e0       	ldi	r18, 0x04	; 4
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	a2 0e       	add	r10, r18
    22da:	b3 1e       	adc	r11, r19
    22dc:	3f e3       	ldi	r19, 0x3F	; 63
    22de:	39 83       	std	Y+1, r19	; 0x01
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <vfprintf+0x130>
    22e2:	83 36       	cpi	r24, 0x63	; 99
    22e4:	31 f0       	breq	.+12     	; 0x22f2 <vfprintf+0x122>
    22e6:	83 37       	cpi	r24, 0x73	; 115
    22e8:	81 f0       	breq	.+32     	; 0x230a <vfprintf+0x13a>
    22ea:	83 35       	cpi	r24, 0x53	; 83
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <vfprintf+0x120>
    22ee:	5a c0       	rjmp	.+180    	; 0x23a4 <vfprintf+0x1d4>
    22f0:	22 c0       	rjmp	.+68     	; 0x2336 <vfprintf+0x166>
    22f2:	f5 01       	movw	r30, r10
    22f4:	80 81       	ld	r24, Z
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	22 e0       	ldi	r18, 0x02	; 2
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	a2 0e       	add	r10, r18
    22fe:	b3 1e       	adc	r11, r19
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	c2 2e       	mov	r12, r18
    2304:	d1 2c       	mov	r13, r1
    2306:	42 01       	movw	r8, r4
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <vfprintf+0x162>
    230a:	92 e0       	ldi	r25, 0x02	; 2
    230c:	29 2e       	mov	r2, r25
    230e:	31 2c       	mov	r3, r1
    2310:	2a 0c       	add	r2, r10
    2312:	3b 1c       	adc	r3, r11
    2314:	f5 01       	movw	r30, r10
    2316:	80 80       	ld	r8, Z
    2318:	91 80       	ldd	r9, Z+1	; 0x01
    231a:	16 ff       	sbrs	r17, 6
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <vfprintf+0x154>
    231e:	6f 2d       	mov	r22, r15
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <vfprintf+0x158>
    2324:	6f ef       	ldi	r22, 0xFF	; 255
    2326:	7f ef       	ldi	r23, 0xFF	; 255
    2328:	c4 01       	movw	r24, r8
    232a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <strnlen>
    232e:	6c 01       	movw	r12, r24
    2330:	51 01       	movw	r10, r2
    2332:	1f 77       	andi	r17, 0x7F	; 127
    2334:	15 c0       	rjmp	.+42     	; 0x2360 <vfprintf+0x190>
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	28 2e       	mov	r2, r24
    233a:	31 2c       	mov	r3, r1
    233c:	2a 0c       	add	r2, r10
    233e:	3b 1c       	adc	r3, r11
    2340:	f5 01       	movw	r30, r10
    2342:	80 80       	ld	r8, Z
    2344:	91 80       	ldd	r9, Z+1	; 0x01
    2346:	16 ff       	sbrs	r17, 6
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <vfprintf+0x180>
    234a:	6f 2d       	mov	r22, r15
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <vfprintf+0x184>
    2350:	6f ef       	ldi	r22, 0xFF	; 255
    2352:	7f ef       	ldi	r23, 0xFF	; 255
    2354:	c4 01       	movw	r24, r8
    2356:	0e 94 c6 12 	call	0x258c	; 0x258c <strnlen_P>
    235a:	6c 01       	movw	r12, r24
    235c:	10 68       	ori	r17, 0x80	; 128
    235e:	51 01       	movw	r10, r2
    2360:	13 fd       	sbrc	r17, 3
    2362:	1c c0       	rjmp	.+56     	; 0x239c <vfprintf+0x1cc>
    2364:	06 c0       	rjmp	.+12     	; 0x2372 <vfprintf+0x1a2>
    2366:	80 e2       	ldi	r24, 0x20	; 32
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	b3 01       	movw	r22, r6
    236c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    2370:	ea 94       	dec	r14
    2372:	8e 2d       	mov	r24, r14
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	c8 16       	cp	r12, r24
    2378:	d9 06       	cpc	r13, r25
    237a:	a8 f3       	brcs	.-22     	; 0x2366 <vfprintf+0x196>
    237c:	0f c0       	rjmp	.+30     	; 0x239c <vfprintf+0x1cc>
    237e:	f4 01       	movw	r30, r8
    2380:	17 fd       	sbrc	r17, 7
    2382:	85 91       	lpm	r24, Z+
    2384:	17 ff       	sbrs	r17, 7
    2386:	81 91       	ld	r24, Z+
    2388:	4f 01       	movw	r8, r30
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	b3 01       	movw	r22, r6
    238e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    2392:	e1 10       	cpse	r14, r1
    2394:	ea 94       	dec	r14
    2396:	08 94       	sec
    2398:	c1 08       	sbc	r12, r1
    239a:	d1 08       	sbc	r13, r1
    239c:	c1 14       	cp	r12, r1
    239e:	d1 04       	cpc	r13, r1
    23a0:	71 f7       	brne	.-36     	; 0x237e <vfprintf+0x1ae>
    23a2:	e7 c0       	rjmp	.+462    	; 0x2572 <vfprintf+0x3a2>
    23a4:	84 36       	cpi	r24, 0x64	; 100
    23a6:	11 f0       	breq	.+4      	; 0x23ac <vfprintf+0x1dc>
    23a8:	89 36       	cpi	r24, 0x69	; 105
    23aa:	51 f5       	brne	.+84     	; 0x2400 <vfprintf+0x230>
    23ac:	f5 01       	movw	r30, r10
    23ae:	17 ff       	sbrs	r17, 7
    23b0:	07 c0       	rjmp	.+14     	; 0x23c0 <vfprintf+0x1f0>
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	a2 81       	ldd	r26, Z+2	; 0x02
    23b8:	b3 81       	ldd	r27, Z+3	; 0x03
    23ba:	24 e0       	ldi	r18, 0x04	; 4
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <vfprintf+0x200>
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	aa 27       	eor	r26, r26
    23c6:	97 fd       	sbrc	r25, 7
    23c8:	a0 95       	com	r26
    23ca:	ba 2f       	mov	r27, r26
    23cc:	22 e0       	ldi	r18, 0x02	; 2
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	a2 0e       	add	r10, r18
    23d2:	b3 1e       	adc	r11, r19
    23d4:	01 2f       	mov	r16, r17
    23d6:	0f 76       	andi	r16, 0x6F	; 111
    23d8:	b7 ff       	sbrs	r27, 7
    23da:	08 c0       	rjmp	.+16     	; 0x23ec <vfprintf+0x21c>
    23dc:	b0 95       	com	r27
    23de:	a0 95       	com	r26
    23e0:	90 95       	com	r25
    23e2:	81 95       	neg	r24
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	af 4f       	sbci	r26, 0xFF	; 255
    23e8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ea:	00 68       	ori	r16, 0x80	; 128
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	a2 01       	movw	r20, r4
    23f2:	2a e0       	ldi	r18, 0x0A	; 10
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	0e 94 08 13 	call	0x2610	; 0x2610 <__ultoa_invert>
    23fa:	d8 2e       	mov	r13, r24
    23fc:	d4 18       	sub	r13, r4
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <vfprintf+0x2ae>
    2400:	85 37       	cpi	r24, 0x75	; 117
    2402:	21 f4       	brne	.+8      	; 0x240c <vfprintf+0x23c>
    2404:	1f 7e       	andi	r17, 0xEF	; 239
    2406:	2a e0       	ldi	r18, 0x0A	; 10
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	20 c0       	rjmp	.+64     	; 0x244c <vfprintf+0x27c>
    240c:	19 7f       	andi	r17, 0xF9	; 249
    240e:	8f 36       	cpi	r24, 0x6F	; 111
    2410:	a9 f0       	breq	.+42     	; 0x243c <vfprintf+0x26c>
    2412:	80 37       	cpi	r24, 0x70	; 112
    2414:	20 f4       	brcc	.+8      	; 0x241e <vfprintf+0x24e>
    2416:	88 35       	cpi	r24, 0x58	; 88
    2418:	09 f0       	breq	.+2      	; 0x241c <vfprintf+0x24c>
    241a:	ae c0       	rjmp	.+348    	; 0x2578 <vfprintf+0x3a8>
    241c:	0b c0       	rjmp	.+22     	; 0x2434 <vfprintf+0x264>
    241e:	80 37       	cpi	r24, 0x70	; 112
    2420:	21 f0       	breq	.+8      	; 0x242a <vfprintf+0x25a>
    2422:	88 37       	cpi	r24, 0x78	; 120
    2424:	09 f0       	breq	.+2      	; 0x2428 <vfprintf+0x258>
    2426:	a8 c0       	rjmp	.+336    	; 0x2578 <vfprintf+0x3a8>
    2428:	01 c0       	rjmp	.+2      	; 0x242c <vfprintf+0x25c>
    242a:	10 61       	ori	r17, 0x10	; 16
    242c:	14 ff       	sbrs	r17, 4
    242e:	09 c0       	rjmp	.+18     	; 0x2442 <vfprintf+0x272>
    2430:	14 60       	ori	r17, 0x04	; 4
    2432:	07 c0       	rjmp	.+14     	; 0x2442 <vfprintf+0x272>
    2434:	14 ff       	sbrs	r17, 4
    2436:	08 c0       	rjmp	.+16     	; 0x2448 <vfprintf+0x278>
    2438:	16 60       	ori	r17, 0x06	; 6
    243a:	06 c0       	rjmp	.+12     	; 0x2448 <vfprintf+0x278>
    243c:	28 e0       	ldi	r18, 0x08	; 8
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	05 c0       	rjmp	.+10     	; 0x244c <vfprintf+0x27c>
    2442:	20 e1       	ldi	r18, 0x10	; 16
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0x27c>
    2448:	20 e1       	ldi	r18, 0x10	; 16
    244a:	32 e0       	ldi	r19, 0x02	; 2
    244c:	f5 01       	movw	r30, r10
    244e:	17 ff       	sbrs	r17, 7
    2450:	07 c0       	rjmp	.+14     	; 0x2460 <vfprintf+0x290>
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	44 e0       	ldi	r20, 0x04	; 4
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	06 c0       	rjmp	.+12     	; 0x246c <vfprintf+0x29c>
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	42 e0       	ldi	r20, 0x02	; 2
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	a4 0e       	add	r10, r20
    246e:	b5 1e       	adc	r11, r21
    2470:	a2 01       	movw	r20, r4
    2472:	0e 94 08 13 	call	0x2610	; 0x2610 <__ultoa_invert>
    2476:	d8 2e       	mov	r13, r24
    2478:	d4 18       	sub	r13, r4
    247a:	01 2f       	mov	r16, r17
    247c:	0f 77       	andi	r16, 0x7F	; 127
    247e:	06 ff       	sbrs	r16, 6
    2480:	09 c0       	rjmp	.+18     	; 0x2494 <vfprintf+0x2c4>
    2482:	0e 7f       	andi	r16, 0xFE	; 254
    2484:	df 14       	cp	r13, r15
    2486:	30 f4       	brcc	.+12     	; 0x2494 <vfprintf+0x2c4>
    2488:	04 ff       	sbrs	r16, 4
    248a:	06 c0       	rjmp	.+12     	; 0x2498 <vfprintf+0x2c8>
    248c:	02 fd       	sbrc	r16, 2
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <vfprintf+0x2c8>
    2490:	0f 7e       	andi	r16, 0xEF	; 239
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <vfprintf+0x2c8>
    2494:	1d 2d       	mov	r17, r13
    2496:	01 c0       	rjmp	.+2      	; 0x249a <vfprintf+0x2ca>
    2498:	1f 2d       	mov	r17, r15
    249a:	80 2f       	mov	r24, r16
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	04 ff       	sbrs	r16, 4
    24a0:	0c c0       	rjmp	.+24     	; 0x24ba <vfprintf+0x2ea>
    24a2:	fe 01       	movw	r30, r28
    24a4:	ed 0d       	add	r30, r13
    24a6:	f1 1d       	adc	r31, r1
    24a8:	20 81       	ld	r18, Z
    24aa:	20 33       	cpi	r18, 0x30	; 48
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <vfprintf+0x2e2>
    24ae:	09 7e       	andi	r16, 0xE9	; 233
    24b0:	09 c0       	rjmp	.+18     	; 0x24c4 <vfprintf+0x2f4>
    24b2:	02 ff       	sbrs	r16, 2
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <vfprintf+0x2f2>
    24b6:	1e 5f       	subi	r17, 0xFE	; 254
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <vfprintf+0x2f4>
    24ba:	86 78       	andi	r24, 0x86	; 134
    24bc:	90 70       	andi	r25, 0x00	; 0
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <vfprintf+0x2f4>
    24c2:	1f 5f       	subi	r17, 0xFF	; 255
    24c4:	80 2e       	mov	r8, r16
    24c6:	99 24       	eor	r9, r9
    24c8:	03 fd       	sbrc	r16, 3
    24ca:	12 c0       	rjmp	.+36     	; 0x24f0 <vfprintf+0x320>
    24cc:	00 ff       	sbrs	r16, 0
    24ce:	0d c0       	rjmp	.+26     	; 0x24ea <vfprintf+0x31a>
    24d0:	fd 2c       	mov	r15, r13
    24d2:	1e 15       	cp	r17, r14
    24d4:	50 f4       	brcc	.+20     	; 0x24ea <vfprintf+0x31a>
    24d6:	fe 0c       	add	r15, r14
    24d8:	f1 1a       	sub	r15, r17
    24da:	1e 2d       	mov	r17, r14
    24dc:	06 c0       	rjmp	.+12     	; 0x24ea <vfprintf+0x31a>
    24de:	80 e2       	ldi	r24, 0x20	; 32
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	b3 01       	movw	r22, r6
    24e4:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    24e8:	1f 5f       	subi	r17, 0xFF	; 255
    24ea:	1e 15       	cp	r17, r14
    24ec:	c0 f3       	brcs	.-16     	; 0x24de <vfprintf+0x30e>
    24ee:	04 c0       	rjmp	.+8      	; 0x24f8 <vfprintf+0x328>
    24f0:	1e 15       	cp	r17, r14
    24f2:	10 f4       	brcc	.+4      	; 0x24f8 <vfprintf+0x328>
    24f4:	e1 1a       	sub	r14, r17
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <vfprintf+0x32a>
    24f8:	ee 24       	eor	r14, r14
    24fa:	84 fe       	sbrs	r8, 4
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <vfprintf+0x34c>
    24fe:	80 e3       	ldi	r24, 0x30	; 48
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	b3 01       	movw	r22, r6
    2504:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    2508:	82 fe       	sbrs	r8, 2
    250a:	1f c0       	rjmp	.+62     	; 0x254a <vfprintf+0x37a>
    250c:	81 fe       	sbrs	r8, 1
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <vfprintf+0x346>
    2510:	88 e5       	ldi	r24, 0x58	; 88
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	10 c0       	rjmp	.+32     	; 0x2536 <vfprintf+0x366>
    2516:	88 e7       	ldi	r24, 0x78	; 120
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0d c0       	rjmp	.+26     	; 0x2536 <vfprintf+0x366>
    251c:	c4 01       	movw	r24, r8
    251e:	86 78       	andi	r24, 0x86	; 134
    2520:	90 70       	andi	r25, 0x00	; 0
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	91 f0       	breq	.+36     	; 0x254a <vfprintf+0x37a>
    2526:	81 fc       	sbrc	r8, 1
    2528:	02 c0       	rjmp	.+4      	; 0x252e <vfprintf+0x35e>
    252a:	80 e2       	ldi	r24, 0x20	; 32
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <vfprintf+0x360>
    252e:	8b e2       	ldi	r24, 0x2B	; 43
    2530:	07 fd       	sbrc	r16, 7
    2532:	8d e2       	ldi	r24, 0x2D	; 45
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	b3 01       	movw	r22, r6
    2538:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    253c:	06 c0       	rjmp	.+12     	; 0x254a <vfprintf+0x37a>
    253e:	80 e3       	ldi	r24, 0x30	; 48
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	b3 01       	movw	r22, r6
    2544:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    2548:	fa 94       	dec	r15
    254a:	df 14       	cp	r13, r15
    254c:	c0 f3       	brcs	.-16     	; 0x253e <vfprintf+0x36e>
    254e:	da 94       	dec	r13
    2550:	f2 01       	movw	r30, r4
    2552:	ed 0d       	add	r30, r13
    2554:	f1 1d       	adc	r31, r1
    2556:	80 81       	ld	r24, Z
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	b3 01       	movw	r22, r6
    255c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    2560:	dd 20       	and	r13, r13
    2562:	a9 f7       	brne	.-22     	; 0x254e <vfprintf+0x37e>
    2564:	06 c0       	rjmp	.+12     	; 0x2572 <vfprintf+0x3a2>
    2566:	80 e2       	ldi	r24, 0x20	; 32
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	b3 01       	movw	r22, r6
    256c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <fputc>
    2570:	ea 94       	dec	r14
    2572:	ee 20       	and	r14, r14
    2574:	c1 f7       	brne	.-16     	; 0x2566 <vfprintf+0x396>
    2576:	40 ce       	rjmp	.-896    	; 0x21f8 <vfprintf+0x28>
    2578:	f3 01       	movw	r30, r6
    257a:	86 81       	ldd	r24, Z+6	; 0x06
    257c:	97 81       	ldd	r25, Z+7	; 0x07
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <vfprintf+0x3b4>
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	9f ef       	ldi	r25, 0xFF	; 255
    2584:	2d 96       	adiw	r28, 0x0d	; 13
    2586:	e2 e1       	ldi	r30, 0x12	; 18
    2588:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__>

0000258c <strnlen_P>:
    258c:	fc 01       	movw	r30, r24
    258e:	05 90       	lpm	r0, Z+
    2590:	61 50       	subi	r22, 0x01	; 1
    2592:	70 40       	sbci	r23, 0x00	; 0
    2594:	01 10       	cpse	r0, r1
    2596:	d8 f7       	brcc	.-10     	; 0x258e <strnlen_P+0x2>
    2598:	80 95       	com	r24
    259a:	90 95       	com	r25
    259c:	8e 0f       	add	r24, r30
    259e:	9f 1f       	adc	r25, r31
    25a0:	08 95       	ret

000025a2 <strnlen>:
    25a2:	fc 01       	movw	r30, r24
    25a4:	61 50       	subi	r22, 0x01	; 1
    25a6:	70 40       	sbci	r23, 0x00	; 0
    25a8:	01 90       	ld	r0, Z+
    25aa:	01 10       	cpse	r0, r1
    25ac:	d8 f7       	brcc	.-10     	; 0x25a4 <strnlen+0x2>
    25ae:	80 95       	com	r24
    25b0:	90 95       	com	r25
    25b2:	8e 0f       	add	r24, r30
    25b4:	9f 1f       	adc	r25, r31
    25b6:	08 95       	ret

000025b8 <fputc>:
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	8c 01       	movw	r16, r24
    25c2:	eb 01       	movw	r28, r22
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	81 ff       	sbrs	r24, 1
    25c8:	1b c0       	rjmp	.+54     	; 0x2600 <fputc+0x48>
    25ca:	82 ff       	sbrs	r24, 2
    25cc:	0d c0       	rjmp	.+26     	; 0x25e8 <fputc+0x30>
    25ce:	2e 81       	ldd	r18, Y+6	; 0x06
    25d0:	3f 81       	ldd	r19, Y+7	; 0x07
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	9d 81       	ldd	r25, Y+5	; 0x05
    25d6:	28 17       	cp	r18, r24
    25d8:	39 07       	cpc	r19, r25
    25da:	64 f4       	brge	.+24     	; 0x25f4 <fputc+0x3c>
    25dc:	e8 81       	ld	r30, Y
    25de:	f9 81       	ldd	r31, Y+1	; 0x01
    25e0:	01 93       	st	Z+, r16
    25e2:	f9 83       	std	Y+1, r31	; 0x01
    25e4:	e8 83       	st	Y, r30
    25e6:	06 c0       	rjmp	.+12     	; 0x25f4 <fputc+0x3c>
    25e8:	e8 85       	ldd	r30, Y+8	; 0x08
    25ea:	f9 85       	ldd	r31, Y+9	; 0x09
    25ec:	80 2f       	mov	r24, r16
    25ee:	09 95       	icall
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	31 f4       	brne	.+12     	; 0x2600 <fputc+0x48>
    25f4:	8e 81       	ldd	r24, Y+6	; 0x06
    25f6:	9f 81       	ldd	r25, Y+7	; 0x07
    25f8:	01 96       	adiw	r24, 0x01	; 1
    25fa:	9f 83       	std	Y+7, r25	; 0x07
    25fc:	8e 83       	std	Y+6, r24	; 0x06
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <fputc+0x4c>
    2600:	0f ef       	ldi	r16, 0xFF	; 255
    2602:	1f ef       	ldi	r17, 0xFF	; 255
    2604:	c8 01       	movw	r24, r16
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	08 95       	ret

00002610 <__ultoa_invert>:
    2610:	fa 01       	movw	r30, r20
    2612:	aa 27       	eor	r26, r26
    2614:	28 30       	cpi	r18, 0x08	; 8
    2616:	51 f1       	breq	.+84     	; 0x266c <__ultoa_invert+0x5c>
    2618:	20 31       	cpi	r18, 0x10	; 16
    261a:	81 f1       	breq	.+96     	; 0x267c <__ultoa_invert+0x6c>
    261c:	e8 94       	clt
    261e:	6f 93       	push	r22
    2620:	6e 7f       	andi	r22, 0xFE	; 254
    2622:	6e 5f       	subi	r22, 0xFE	; 254
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	8f 4f       	sbci	r24, 0xFF	; 255
    2628:	9f 4f       	sbci	r25, 0xFF	; 255
    262a:	af 4f       	sbci	r26, 0xFF	; 255
    262c:	b1 e0       	ldi	r27, 0x01	; 1
    262e:	3e d0       	rcall	.+124    	; 0x26ac <__ultoa_invert+0x9c>
    2630:	b4 e0       	ldi	r27, 0x04	; 4
    2632:	3c d0       	rcall	.+120    	; 0x26ac <__ultoa_invert+0x9c>
    2634:	67 0f       	add	r22, r23
    2636:	78 1f       	adc	r23, r24
    2638:	89 1f       	adc	r24, r25
    263a:	9a 1f       	adc	r25, r26
    263c:	a1 1d       	adc	r26, r1
    263e:	68 0f       	add	r22, r24
    2640:	79 1f       	adc	r23, r25
    2642:	8a 1f       	adc	r24, r26
    2644:	91 1d       	adc	r25, r1
    2646:	a1 1d       	adc	r26, r1
    2648:	6a 0f       	add	r22, r26
    264a:	71 1d       	adc	r23, r1
    264c:	81 1d       	adc	r24, r1
    264e:	91 1d       	adc	r25, r1
    2650:	a1 1d       	adc	r26, r1
    2652:	20 d0       	rcall	.+64     	; 0x2694 <__ultoa_invert+0x84>
    2654:	09 f4       	brne	.+2      	; 0x2658 <__ultoa_invert+0x48>
    2656:	68 94       	set
    2658:	3f 91       	pop	r19
    265a:	2a e0       	ldi	r18, 0x0A	; 10
    265c:	26 9f       	mul	r18, r22
    265e:	11 24       	eor	r1, r1
    2660:	30 19       	sub	r19, r0
    2662:	30 5d       	subi	r19, 0xD0	; 208
    2664:	31 93       	st	Z+, r19
    2666:	de f6       	brtc	.-74     	; 0x261e <__ultoa_invert+0xe>
    2668:	cf 01       	movw	r24, r30
    266a:	08 95       	ret
    266c:	46 2f       	mov	r20, r22
    266e:	47 70       	andi	r20, 0x07	; 7
    2670:	40 5d       	subi	r20, 0xD0	; 208
    2672:	41 93       	st	Z+, r20
    2674:	b3 e0       	ldi	r27, 0x03	; 3
    2676:	0f d0       	rcall	.+30     	; 0x2696 <__ultoa_invert+0x86>
    2678:	c9 f7       	brne	.-14     	; 0x266c <__ultoa_invert+0x5c>
    267a:	f6 cf       	rjmp	.-20     	; 0x2668 <__ultoa_invert+0x58>
    267c:	46 2f       	mov	r20, r22
    267e:	4f 70       	andi	r20, 0x0F	; 15
    2680:	40 5d       	subi	r20, 0xD0	; 208
    2682:	4a 33       	cpi	r20, 0x3A	; 58
    2684:	18 f0       	brcs	.+6      	; 0x268c <__ultoa_invert+0x7c>
    2686:	49 5d       	subi	r20, 0xD9	; 217
    2688:	31 fd       	sbrc	r19, 1
    268a:	40 52       	subi	r20, 0x20	; 32
    268c:	41 93       	st	Z+, r20
    268e:	02 d0       	rcall	.+4      	; 0x2694 <__ultoa_invert+0x84>
    2690:	a9 f7       	brne	.-22     	; 0x267c <__ultoa_invert+0x6c>
    2692:	ea cf       	rjmp	.-44     	; 0x2668 <__ultoa_invert+0x58>
    2694:	b4 e0       	ldi	r27, 0x04	; 4
    2696:	a6 95       	lsr	r26
    2698:	97 95       	ror	r25
    269a:	87 95       	ror	r24
    269c:	77 95       	ror	r23
    269e:	67 95       	ror	r22
    26a0:	ba 95       	dec	r27
    26a2:	c9 f7       	brne	.-14     	; 0x2696 <__ultoa_invert+0x86>
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	61 05       	cpc	r22, r1
    26a8:	71 05       	cpc	r23, r1
    26aa:	08 95       	ret
    26ac:	9b 01       	movw	r18, r22
    26ae:	ac 01       	movw	r20, r24
    26b0:	0a 2e       	mov	r0, r26
    26b2:	06 94       	lsr	r0
    26b4:	57 95       	ror	r21
    26b6:	47 95       	ror	r20
    26b8:	37 95       	ror	r19
    26ba:	27 95       	ror	r18
    26bc:	ba 95       	dec	r27
    26be:	c9 f7       	brne	.-14     	; 0x26b2 <__ultoa_invert+0xa2>
    26c0:	62 0f       	add	r22, r18
    26c2:	73 1f       	adc	r23, r19
    26c4:	84 1f       	adc	r24, r20
    26c6:	95 1f       	adc	r25, r21
    26c8:	a0 1d       	adc	r26, r0
    26ca:	08 95       	ret

000026cc <__prologue_saves__>:
    26cc:	2f 92       	push	r2
    26ce:	3f 92       	push	r3
    26d0:	4f 92       	push	r4
    26d2:	5f 92       	push	r5
    26d4:	6f 92       	push	r6
    26d6:	7f 92       	push	r7
    26d8:	8f 92       	push	r8
    26da:	9f 92       	push	r9
    26dc:	af 92       	push	r10
    26de:	bf 92       	push	r11
    26e0:	cf 92       	push	r12
    26e2:	df 92       	push	r13
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	ca 1b       	sub	r28, r26
    26f6:	db 0b       	sbc	r29, r27
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	09 94       	ijmp

00002704 <__epilogue_restores__>:
    2704:	2a 88       	ldd	r2, Y+18	; 0x12
    2706:	39 88       	ldd	r3, Y+17	; 0x11
    2708:	48 88       	ldd	r4, Y+16	; 0x10
    270a:	5f 84       	ldd	r5, Y+15	; 0x0f
    270c:	6e 84       	ldd	r6, Y+14	; 0x0e
    270e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2710:	8c 84       	ldd	r8, Y+12	; 0x0c
    2712:	9b 84       	ldd	r9, Y+11	; 0x0b
    2714:	aa 84       	ldd	r10, Y+10	; 0x0a
    2716:	b9 84       	ldd	r11, Y+9	; 0x09
    2718:	c8 84       	ldd	r12, Y+8	; 0x08
    271a:	df 80       	ldd	r13, Y+7	; 0x07
    271c:	ee 80       	ldd	r14, Y+6	; 0x06
    271e:	fd 80       	ldd	r15, Y+5	; 0x05
    2720:	0c 81       	ldd	r16, Y+4	; 0x04
    2722:	1b 81       	ldd	r17, Y+3	; 0x03
    2724:	aa 81       	ldd	r26, Y+2	; 0x02
    2726:	b9 81       	ldd	r27, Y+1	; 0x01
    2728:	ce 0f       	add	r28, r30
    272a:	d1 1d       	adc	r29, r1
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	ed 01       	movw	r28, r26
    2738:	08 95       	ret

0000273a <_exit>:
    273a:	f8 94       	cli

0000273c <__stop_program>:
    273c:	ff cf       	rjmp	.-2      	; 0x273c <__stop_program>
